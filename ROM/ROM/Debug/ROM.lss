
ROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800100  00000a5e  00000ad2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a5e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000cd2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d04  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b99  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b7  00000000  00000000  00001975  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000948  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d8  00000000  00000000  00002b74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000413  00000000  00000000  00002d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000037c  00000000  00000000  0000315f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000034db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 c6 04 	call	0x98c	; 0x98c <main>
  8e:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <mul2>:





inline uint8_t mul2(register uint8_t a) {
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	return (a&0x80)?((a<<1)^0x1b):(a<<1);
  9e:	98 2f       	mov	r25, r24
  a0:	99 23       	and	r25, r25
  a2:	44 f4       	brge	.+16     	; 0xb4 <mul2+0x1e>
  a4:	88 2f       	mov	r24, r24
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	98 2f       	mov	r25, r24
  ae:	8b e1       	ldi	r24, 0x1B	; 27
  b0:	89 27       	eor	r24, r25
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <mul2+0x20>
  b4:	88 0f       	add	r24, r24
}
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <inv_shift_rows>:

void inv_shift_rows(register uint8_t *state) {
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
   register uint8_t temp,x;
    // row1
	
    temp        = *(state+13);
  c8:	fc 01       	movw	r30, r24
  ca:	05 85       	ldd	r16, Z+13	; 0x0d
	for(x=13;x>3;x-=4)
  cc:	1d e0       	ldi	r17, 0x0D	; 13
  ce:	0f c0       	rjmp	.+30     	; 0xee <inv_shift_rows+0x32>
	{*(state+x) = *(state+x-4);
  d0:	21 2f       	mov	r18, r17
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	28 0f       	add	r18, r24
  d6:	39 1f       	adc	r19, r25
  d8:	41 2f       	mov	r20, r17
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	44 50       	subi	r20, 0x04	; 4
  de:	51 09       	sbc	r21, r1
  e0:	48 0f       	add	r20, r24
  e2:	59 1f       	adc	r21, r25
  e4:	fa 01       	movw	r30, r20
  e6:	40 81       	ld	r20, Z
  e8:	f9 01       	movw	r30, r18
  ea:	40 83       	st	Z, r20
void inv_shift_rows(register uint8_t *state) {
   register uint8_t temp,x;
    // row1
	
    temp        = *(state+13);
	for(x=13;x>3;x-=4)
  ec:	14 50       	subi	r17, 0x04	; 4
  ee:	14 30       	cpi	r17, 0x04	; 4
  f0:	78 f7       	brcc	.-34     	; 0xd0 <inv_shift_rows+0x14>
	{*(state+x) = *(state+x-4);
	}
   
    *(state+1)  = temp;
  f2:	9c 01       	movw	r18, r24
  f4:	2f 5f       	subi	r18, 0xFF	; 255
  f6:	3f 4f       	sbci	r19, 0xFF	; 255
  f8:	f9 01       	movw	r30, r18
  fa:	00 83       	st	Z, r16
    // row2
    temp        = *(state+14);
  fc:	fc 01       	movw	r30, r24
  fe:	06 85       	ldd	r16, Z+14	; 0x0e
    *(state+14) = *(state+6);
 100:	9c 01       	movw	r18, r24
 102:	22 5f       	subi	r18, 0xF2	; 242
 104:	3f 4f       	sbci	r19, 0xFF	; 255
 106:	fc 01       	movw	r30, r24
 108:	46 81       	ldd	r20, Z+6	; 0x06
 10a:	f9 01       	movw	r30, r18
 10c:	40 83       	st	Z, r20
    *(state+6)  = temp;
 10e:	9c 01       	movw	r18, r24
 110:	2a 5f       	subi	r18, 0xFA	; 250
 112:	3f 4f       	sbci	r19, 0xFF	; 255
 114:	f9 01       	movw	r30, r18
 116:	00 83       	st	Z, r16
    temp        = *(state+10);
 118:	fc 01       	movw	r30, r24
 11a:	02 85       	ldd	r16, Z+10	; 0x0a
    *(state+10) = *(state+2);
 11c:	9c 01       	movw	r18, r24
 11e:	26 5f       	subi	r18, 0xF6	; 246
 120:	3f 4f       	sbci	r19, 0xFF	; 255
 122:	fc 01       	movw	r30, r24
 124:	42 81       	ldd	r20, Z+2	; 0x02
 126:	f9 01       	movw	r30, r18
 128:	40 83       	st	Z, r20
    *(state+2)  = temp;
 12a:	9c 01       	movw	r18, r24
 12c:	2e 5f       	subi	r18, 0xFE	; 254
 12e:	3f 4f       	sbci	r19, 0xFF	; 255
 130:	f9 01       	movw	r30, r18
 132:	00 83       	st	Z, r16
    // row3
    temp        = *(state+3);
 134:	fc 01       	movw	r30, r24
 136:	03 81       	ldd	r16, Z+3	; 0x03
	for(x=3;x<15;x+=4)
 138:	13 e0       	ldi	r17, 0x03	; 3
 13a:	0f c0       	rjmp	.+30     	; 0x15a <inv_shift_rows+0x9e>
	{
		*(state+x)  = *(state+x+4);
 13c:	21 2f       	mov	r18, r17
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	28 0f       	add	r18, r24
 142:	39 1f       	adc	r19, r25
 144:	41 2f       	mov	r20, r17
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	4c 5f       	subi	r20, 0xFC	; 252
 14a:	5f 4f       	sbci	r21, 0xFF	; 255
 14c:	48 0f       	add	r20, r24
 14e:	59 1f       	adc	r21, r25
 150:	fa 01       	movw	r30, r20
 152:	40 81       	ld	r20, Z
 154:	f9 01       	movw	r30, r18
 156:	40 83       	st	Z, r20
    temp        = *(state+10);
    *(state+10) = *(state+2);
    *(state+2)  = temp;
    // row3
    temp        = *(state+3);
	for(x=3;x<15;x+=4)
 158:	1c 5f       	subi	r17, 0xFC	; 252
 15a:	1f 30       	cpi	r17, 0x0F	; 15
 15c:	78 f3       	brcs	.-34     	; 0x13c <inv_shift_rows+0x80>
	{
		*(state+x)  = *(state+x+4);
	}
    
    *(state+15) = temp;
 15e:	0f 96       	adiw	r24, 0x0f	; 15
 160:	fc 01       	movw	r30, r24
 162:	00 83       	st	Z, r16
	
}
 164:	00 00       	nop
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	08 95       	ret

00000170 <aes_decrypt_128>:
void aes_decrypt_128(register uint8_t *roundkeys, register uint8_t *ciphertext,register uint8_t *plaintext) {
 170:	6f 92       	push	r6
 172:	7f 92       	push	r7
 174:	8f 92       	push	r8
 176:	9f 92       	push	r9
 178:	af 92       	push	r10
 17a:	bf 92       	push	r11
 17c:	cf 92       	push	r12
 17e:	df 92       	push	r13
 180:	ef 92       	push	r14
 182:	ff 92       	push	r15
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	60 97       	sbiw	r28, 0x10	; 16
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	de bf       	out	0x3e, r29	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	cd bf       	out	0x3d, r28	; 61
 19c:	6c 01       	movw	r12, r24
 19e:	7a 01       	movw	r14, r20

    uint8_t tmp[16];
    
    register uint8_t i, j,t,u,v;

    roundkeys += 160;
 1a0:	80 ea       	ldi	r24, 0xA0	; 160
 1a2:	c8 0e       	add	r12, r24
 1a4:	d1 1c       	adc	r13, r1

    // first round
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 1a6:	10 e0       	ldi	r17, 0x00	; 0
 1a8:	14 c0       	rjmp	.+40     	; 0x1d2 <aes_decrypt_128+0x62>
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
 1aa:	81 2f       	mov	r24, r17
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	8e 0d       	add	r24, r14
 1b0:	9f 1d       	adc	r25, r15
 1b2:	21 2f       	mov	r18, r17
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	26 0f       	add	r18, r22
 1b8:	37 1f       	adc	r19, r23
 1ba:	f9 01       	movw	r30, r18
 1bc:	40 81       	ld	r20, Z
 1be:	21 2f       	mov	r18, r17
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	2c 0d       	add	r18, r12
 1c4:	3d 1d       	adc	r19, r13
 1c6:	f9 01       	movw	r30, r18
 1c8:	20 81       	ld	r18, Z
 1ca:	24 27       	eor	r18, r20
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 83       	st	Z, r18
    register uint8_t i, j,t,u,v;

    roundkeys += 160;

    // first round
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 1d0:	1f 5f       	subi	r17, 0xFF	; 255
 1d2:	10 31       	cpi	r17, 0x10	; 16
 1d4:	50 f3       	brcs	.-44     	; 0x1aa <aes_decrypt_128+0x3a>
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
    }
    roundkeys -= 16;
 1d6:	f0 e1       	ldi	r31, 0x10	; 16
 1d8:	cf 1a       	sub	r12, r31
 1da:	d1 08       	sbc	r13, r1
    inv_shift_rows(plaintext);
 1dc:	c7 01       	movw	r24, r14
 1de:	0e 94 5e 00 	call	0xbc	; 0xbc <inv_shift_rows>
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 1e2:	10 e0       	ldi	r17, 0x00	; 0
 1e4:	13 c0       	rjmp	.+38     	; 0x20c <aes_decrypt_128+0x9c>
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
 1e6:	81 2f       	mov	r24, r17
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	8e 0d       	add	r24, r14
 1ec:	9f 1d       	adc	r25, r15
 1ee:	21 2f       	mov	r18, r17
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	2e 0d       	add	r18, r14
 1f4:	3f 1d       	adc	r19, r15
 1f6:	f9 01       	movw	r30, r18
 1f8:	20 81       	ld	r18, Z
 1fa:	22 2f       	mov	r18, r18
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	20 50       	subi	r18, 0x00	; 0
 200:	3f 4f       	sbci	r19, 0xFF	; 255
 202:	f9 01       	movw	r30, r18
 204:	20 81       	ld	r18, Z
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
    }
    roundkeys -= 16;
    inv_shift_rows(plaintext);
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 20a:	1f 5f       	subi	r17, 0xFF	; 255
 20c:	10 31       	cpi	r17, 0x10	; 16
 20e:	58 f3       	brcs	.-42     	; 0x1e6 <aes_decrypt_128+0x76>
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
 210:	aa 24       	eor	r10, r10
 212:	a3 94       	inc	r10
 214:	37 c1       	rjmp	.+622    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
        
        // Inverse AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 216:	10 e0       	ldi	r17, 0x00	; 0
 218:	17 c0       	rjmp	.+46     	; 0x248 <aes_decrypt_128+0xd8>
            *(tmp+i) = *(plaintext+i) ^ *(roundkeys+i);
 21a:	81 2f       	mov	r24, r17
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	9e 01       	movw	r18, r28
 220:	2f 5f       	subi	r18, 0xFF	; 255
 222:	3f 4f       	sbci	r19, 0xFF	; 255
 224:	82 0f       	add	r24, r18
 226:	93 1f       	adc	r25, r19
 228:	21 2f       	mov	r18, r17
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	2e 0d       	add	r18, r14
 22e:	3f 1d       	adc	r19, r15
 230:	f9 01       	movw	r30, r18
 232:	40 81       	ld	r20, Z
 234:	21 2f       	mov	r18, r17
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	2c 0d       	add	r18, r12
 23a:	3d 1d       	adc	r19, r13
 23c:	f9 01       	movw	r30, r18
 23e:	20 81       	ld	r18, Z
 240:	24 27       	eor	r18, r20
 242:	fc 01       	movw	r30, r24
 244:	20 83       	st	Z, r18
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
        
        // Inverse AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 246:	1f 5f       	subi	r17, 0xFF	; 255
 248:	10 31       	cpi	r17, 0x10	; 16
 24a:	38 f3       	brcs	.-50     	; 0x21a <aes_decrypt_128+0xaa>
         * [0e 0b 0d 09]   [s0  s4  s8  s12]
         * [09 0e 0b 0d] . [s1  s5  s9  s13]
         * [0d 09 0e 0b]   [s2  s6  s10 s14]
         * [0b 0d 09 0e]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
 24c:	10 e0       	ldi	r17, 0x00	; 0
 24e:	f9 c0       	rjmp	.+498    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
 250:	81 2f       	mov	r24, r17
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	9e 01       	movw	r18, r28
 256:	2f 5f       	subi	r18, 0xFF	; 255
 258:	3f 4f       	sbci	r19, 0xFF	; 255
 25a:	82 0f       	add	r24, r18
 25c:	93 1f       	adc	r25, r19
 25e:	fc 01       	movw	r30, r24
 260:	40 81       	ld	r20, Z
 262:	81 2f       	mov	r24, r17
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	9e 01       	movw	r18, r28
 26a:	2f 5f       	subi	r18, 0xFF	; 255
 26c:	3f 4f       	sbci	r19, 0xFF	; 255
 26e:	82 0f       	add	r24, r18
 270:	93 1f       	adc	r25, r19
 272:	fc 01       	movw	r30, r24
 274:	80 81       	ld	r24, Z
 276:	48 27       	eor	r20, r24
 278:	81 2f       	mov	r24, r17
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 96       	adiw	r24, 0x02	; 2
 27e:	9e 01       	movw	r18, r28
 280:	2f 5f       	subi	r18, 0xFF	; 255
 282:	3f 4f       	sbci	r19, 0xFF	; 255
 284:	82 0f       	add	r24, r18
 286:	93 1f       	adc	r25, r19
 288:	fc 01       	movw	r30, r24
 28a:	80 81       	ld	r24, Z
 28c:	48 27       	eor	r20, r24
 28e:	81 2f       	mov	r24, r17
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	03 96       	adiw	r24, 0x03	; 3
 294:	9e 01       	movw	r18, r28
 296:	2f 5f       	subi	r18, 0xFF	; 255
 298:	3f 4f       	sbci	r19, 0xFF	; 255
 29a:	82 0f       	add	r24, r18
 29c:	93 1f       	adc	r25, r19
 29e:	fc 01       	movw	r30, r24
 2a0:	80 81       	ld	r24, Z
 2a2:	b4 2e       	mov	r11, r20
 2a4:	b8 26       	eor	r11, r24
			register uint8_t z = 0,x;
 2a6:	71 2c       	mov	r7, r1
			
			while(z<3)
 2a8:	2f c0       	rjmp	.+94     	; 0x308 <aes_decrypt_128+0x198>
			{
				x=i+z;
 2aa:	01 2f       	mov	r16, r17
 2ac:	07 0d       	add	r16, r7
				plaintext[x]   = t ^ tmp[x]   ^ mul2(tmp[x]   ^ tmp[x+1]);
 2ae:	80 2f       	mov	r24, r16
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	47 01       	movw	r8, r14
 2b4:	88 0e       	add	r8, r24
 2b6:	99 1e       	adc	r9, r25
 2b8:	80 2f       	mov	r24, r16
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	9e 01       	movw	r18, r28
 2be:	2f 5f       	subi	r18, 0xFF	; 255
 2c0:	3f 4f       	sbci	r19, 0xFF	; 255
 2c2:	82 0f       	add	r24, r18
 2c4:	93 1f       	adc	r25, r19
 2c6:	fc 01       	movw	r30, r24
 2c8:	80 81       	ld	r24, Z
 2ca:	68 2e       	mov	r6, r24
 2cc:	6b 24       	eor	r6, r11
 2ce:	80 2f       	mov	r24, r16
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	9e 01       	movw	r18, r28
 2d4:	2f 5f       	subi	r18, 0xFF	; 255
 2d6:	3f 4f       	sbci	r19, 0xFF	; 255
 2d8:	82 0f       	add	r24, r18
 2da:	93 1f       	adc	r25, r19
 2dc:	fc 01       	movw	r30, r24
 2de:	40 81       	ld	r20, Z
 2e0:	80 2f       	mov	r24, r16
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	9e 01       	movw	r18, r28
 2e8:	2f 5f       	subi	r18, 0xFF	; 255
 2ea:	3f 4f       	sbci	r19, 0xFF	; 255
 2ec:	82 0f       	add	r24, r18
 2ee:	93 1f       	adc	r25, r19
 2f0:	fc 01       	movw	r30, r24
 2f2:	80 81       	ld	r24, Z
 2f4:	84 27       	eor	r24, r20
 2f6:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 2fa:	86 25       	eor	r24, r6
 2fc:	f4 01       	movw	r30, r8
 2fe:	80 83       	st	Z, r24
				z++;
 300:	87 2d       	mov	r24, r7
 302:	77 24       	eor	r7, r7
 304:	73 94       	inc	r7
 306:	78 0e       	add	r7, r24
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
			register uint8_t z = 0,x;
			
			while(z<3)
 308:	f2 e0       	ldi	r31, 0x02	; 2
 30a:	f7 15       	cp	r31, r7
 30c:	70 f6       	brcc	.-100    	; 0x2aa <aes_decrypt_128+0x13a>
			{
				x=i+z;
				plaintext[x]   = t ^ tmp[x]   ^ mul2(tmp[x]   ^ tmp[x+1]);
				z++;
			}
            plaintext[i+3] = t ^ tmp[i+3] ^ mul2(tmp[i+3] ^ tmp[i]);
 30e:	81 2f       	mov	r24, r17
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	03 96       	adiw	r24, 0x03	; 3
 314:	47 01       	movw	r8, r14
 316:	88 0e       	add	r8, r24
 318:	99 1e       	adc	r9, r25
 31a:	81 2f       	mov	r24, r17
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	03 96       	adiw	r24, 0x03	; 3
 320:	9e 01       	movw	r18, r28
 322:	2f 5f       	subi	r18, 0xFF	; 255
 324:	3f 4f       	sbci	r19, 0xFF	; 255
 326:	82 0f       	add	r24, r18
 328:	93 1f       	adc	r25, r19
 32a:	fc 01       	movw	r30, r24
 32c:	80 81       	ld	r24, Z
 32e:	08 2f       	mov	r16, r24
 330:	0b 25       	eor	r16, r11
 332:	81 2f       	mov	r24, r17
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	03 96       	adiw	r24, 0x03	; 3
 338:	9e 01       	movw	r18, r28
 33a:	2f 5f       	subi	r18, 0xFF	; 255
 33c:	3f 4f       	sbci	r19, 0xFF	; 255
 33e:	82 0f       	add	r24, r18
 340:	93 1f       	adc	r25, r19
 342:	fc 01       	movw	r30, r24
 344:	40 81       	ld	r20, Z
 346:	81 2f       	mov	r24, r17
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	9e 01       	movw	r18, r28
 34c:	2f 5f       	subi	r18, 0xFF	; 255
 34e:	3f 4f       	sbci	r19, 0xFF	; 255
 350:	82 0f       	add	r24, r18
 352:	93 1f       	adc	r25, r19
 354:	fc 01       	movw	r30, r24
 356:	80 81       	ld	r24, Z
 358:	84 27       	eor	r24, r20
 35a:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 35e:	80 27       	eor	r24, r16
 360:	f4 01       	movw	r30, r8
 362:	80 83       	st	Z, r24
            u = mul2(mul2(tmp[i]   ^ tmp[i+2]));
 364:	81 2f       	mov	r24, r17
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	9e 01       	movw	r18, r28
 36a:	2f 5f       	subi	r18, 0xFF	; 255
 36c:	3f 4f       	sbci	r19, 0xFF	; 255
 36e:	82 0f       	add	r24, r18
 370:	93 1f       	adc	r25, r19
 372:	fc 01       	movw	r30, r24
 374:	40 81       	ld	r20, Z
 376:	81 2f       	mov	r24, r17
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 96       	adiw	r24, 0x02	; 2
 37c:	9e 01       	movw	r18, r28
 37e:	2f 5f       	subi	r18, 0xFF	; 255
 380:	3f 4f       	sbci	r19, 0xFF	; 255
 382:	82 0f       	add	r24, r18
 384:	93 1f       	adc	r25, r19
 386:	fc 01       	movw	r30, r24
 388:	80 81       	ld	r24, Z
 38a:	84 27       	eor	r24, r20
 38c:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 390:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 394:	98 2e       	mov	r9, r24
            v = mul2(mul2(tmp[i+1] ^ tmp[i+3]));
 396:	81 2f       	mov	r24, r17
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	9e 01       	movw	r18, r28
 39e:	2f 5f       	subi	r18, 0xFF	; 255
 3a0:	3f 4f       	sbci	r19, 0xFF	; 255
 3a2:	82 0f       	add	r24, r18
 3a4:	93 1f       	adc	r25, r19
 3a6:	fc 01       	movw	r30, r24
 3a8:	40 81       	ld	r20, Z
 3aa:	81 2f       	mov	r24, r17
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	03 96       	adiw	r24, 0x03	; 3
 3b0:	9e 01       	movw	r18, r28
 3b2:	2f 5f       	subi	r18, 0xFF	; 255
 3b4:	3f 4f       	sbci	r19, 0xFF	; 255
 3b6:	82 0f       	add	r24, r18
 3b8:	93 1f       	adc	r25, r19
 3ba:	fc 01       	movw	r30, r24
 3bc:	80 81       	ld	r24, Z
 3be:	84 27       	eor	r24, r20
 3c0:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 3c4:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 3c8:	88 2e       	mov	r8, r24
            t = mul2(u ^ v);
 3ca:	89 2d       	mov	r24, r9
 3cc:	88 25       	eor	r24, r8
 3ce:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 3d2:	b8 2e       	mov	r11, r24
			for(x=0;x<4;x+=2)
 3d4:	00 e0       	ldi	r16, 0x00	; 0
 3d6:	32 c0       	rjmp	.+100    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			{ plaintext[i+x]   ^= (t ^ u);
 3d8:	21 2f       	mov	r18, r17
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	80 2f       	mov	r24, r16
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	82 0f       	add	r24, r18
 3e2:	93 1f       	adc	r25, r19
 3e4:	8e 0d       	add	r24, r14
 3e6:	9f 1d       	adc	r25, r15
 3e8:	41 2f       	mov	r20, r17
 3ea:	50 e0       	ldi	r21, 0x00	; 0
 3ec:	20 2f       	mov	r18, r16
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	24 0f       	add	r18, r20
 3f2:	35 1f       	adc	r19, r21
 3f4:	2e 0d       	add	r18, r14
 3f6:	3f 1d       	adc	r19, r15
 3f8:	f9 01       	movw	r30, r18
 3fa:	30 81       	ld	r19, Z
 3fc:	2b 2d       	mov	r18, r11
 3fe:	29 25       	eor	r18, r9
 400:	23 27       	eor	r18, r19
 402:	fc 01       	movw	r30, r24
 404:	20 83       	st	Z, r18
             plaintext[i+x+1] ^= (t ^ v);
 406:	21 2f       	mov	r18, r17
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	80 2f       	mov	r24, r16
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	82 0f       	add	r24, r18
 410:	93 1f       	adc	r25, r19
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	8e 0d       	add	r24, r14
 416:	9f 1d       	adc	r25, r15
 418:	41 2f       	mov	r20, r17
 41a:	50 e0       	ldi	r21, 0x00	; 0
 41c:	20 2f       	mov	r18, r16
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	24 0f       	add	r18, r20
 422:	35 1f       	adc	r19, r21
 424:	2f 5f       	subi	r18, 0xFF	; 255
 426:	3f 4f       	sbci	r19, 0xFF	; 255
 428:	2e 0d       	add	r18, r14
 42a:	3f 1d       	adc	r19, r15
 42c:	f9 01       	movw	r30, r18
 42e:	30 81       	ld	r19, Z
 430:	2b 2d       	mov	r18, r11
 432:	28 25       	eor	r18, r8
 434:	23 27       	eor	r18, r19
 436:	fc 01       	movw	r30, r24
 438:	20 83       	st	Z, r18
			}
            plaintext[i+3] = t ^ tmp[i+3] ^ mul2(tmp[i+3] ^ tmp[i]);
            u = mul2(mul2(tmp[i]   ^ tmp[i+2]));
            v = mul2(mul2(tmp[i+1] ^ tmp[i+3]));
            t = mul2(u ^ v);
			for(x=0;x<4;x+=2)
 43a:	0e 5f       	subi	r16, 0xFE	; 254
 43c:	04 30       	cpi	r16, 0x04	; 4
 43e:	60 f2       	brcs	.-104    	; 0x3d8 <aes_decrypt_128+0x268>
         * [0e 0b 0d 09]   [s0  s4  s8  s12]
         * [09 0e 0b 0d] . [s1  s5  s9  s13]
         * [0d 09 0e 0b]   [s2  s6  s10 s14]
         * [0b 0d 09 0e]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
 440:	1c 5f       	subi	r17, 0xFC	; 252
 442:	10 31       	cpi	r17, 0x10	; 16
 444:	08 f4       	brcc	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 446:	04 cf       	rjmp	.-504    	; 0x250 <aes_decrypt_128+0xe0>
			}
          
        }
        
        // Inverse ShiftRows
        inv_shift_rows(plaintext);
 448:	c7 01       	movw	r24, r14
 44a:	0e 94 5e 00 	call	0xbc	; 0xbc <inv_shift_rows>
        
        // Inverse SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 44e:	10 e0       	ldi	r17, 0x00	; 0
 450:	13 c0       	rjmp	.+38     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
            *(plaintext+i) = INV_SBOX[*(plaintext+i)];
 452:	81 2f       	mov	r24, r17
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	8e 0d       	add	r24, r14
 458:	9f 1d       	adc	r25, r15
 45a:	21 2f       	mov	r18, r17
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	2e 0d       	add	r18, r14
 460:	3f 1d       	adc	r19, r15
 462:	f9 01       	movw	r30, r18
 464:	20 81       	ld	r18, Z
 466:	22 2f       	mov	r18, r18
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	20 50       	subi	r18, 0x00	; 0
 46c:	3f 4f       	sbci	r19, 0xFF	; 255
 46e:	f9 01       	movw	r30, r18
 470:	20 81       	ld	r18, Z
 472:	fc 01       	movw	r30, r24
 474:	20 83       	st	Z, r18
        
        // Inverse ShiftRows
        inv_shift_rows(plaintext);
        
        // Inverse SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 476:	1f 5f       	subi	r17, 0xFF	; 255
 478:	10 31       	cpi	r17, 0x10	; 16
 47a:	58 f3       	brcs	.-42     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
            *(plaintext+i) = INV_SBOX[*(plaintext+i)];
        }

        roundkeys -= 16;
 47c:	f0 e1       	ldi	r31, 0x10	; 16
 47e:	cf 1a       	sub	r12, r31
 480:	d1 08       	sbc	r13, r1
    inv_shift_rows(plaintext);
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
 482:	a3 94       	inc	r10
 484:	89 e0       	ldi	r24, 0x09	; 9
 486:	8a 15       	cp	r24, r10
 488:	08 f0       	brcs	.+2      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 48a:	c5 ce       	rjmp	.-630    	; 0x216 <aes_decrypt_128+0xa6>
        roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 48c:	10 e0       	ldi	r17, 0x00	; 0
 48e:	14 c0       	rjmp	.+40     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
        *(plaintext+i) ^= *(roundkeys+i);
 490:	81 2f       	mov	r24, r17
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	8e 0d       	add	r24, r14
 496:	9f 1d       	adc	r25, r15
 498:	21 2f       	mov	r18, r17
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	2e 0d       	add	r18, r14
 49e:	3f 1d       	adc	r19, r15
 4a0:	f9 01       	movw	r30, r18
 4a2:	40 81       	ld	r20, Z
 4a4:	21 2f       	mov	r18, r17
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	2c 0d       	add	r18, r12
 4aa:	3d 1d       	adc	r19, r13
 4ac:	f9 01       	movw	r30, r18
 4ae:	20 81       	ld	r18, Z
 4b0:	24 27       	eor	r18, r20
 4b2:	fc 01       	movw	r30, r24
 4b4:	20 83       	st	Z, r18
        roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 4b6:	1f 5f       	subi	r17, 0xFF	; 255
 4b8:	10 31       	cpi	r17, 0x10	; 16
 4ba:	50 f3       	brcs	.-44     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
        *(plaintext+i) ^= *(roundkeys+i);
    }

 4bc:	00 00       	nop
 4be:	60 96       	adiw	r28, 0x10	; 16
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	f8 94       	cli
 4c4:	de bf       	out	0x3e, r29	; 62
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	cd bf       	out	0x3d, r28	; 61
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	0f 91       	pop	r16
 4d2:	ff 90       	pop	r15
 4d4:	ef 90       	pop	r14
 4d6:	df 90       	pop	r13
 4d8:	cf 90       	pop	r12
 4da:	bf 90       	pop	r11
 4dc:	af 90       	pop	r10
 4de:	9f 90       	pop	r9
 4e0:	8f 90       	pop	r8
 4e2:	7f 90       	pop	r7
 4e4:	6f 90       	pop	r6
 4e6:	08 95       	ret

000004e8 <shift_rows>:
 *  Row0: s0  s4  s8  s12   <<< 0 byte
 *  Row1: s1  s5  s9  s13   <<< 1 byte
 *  Row2: s2  s6  s10 s14   <<< 2 bytes
 *  Row3: s3  s7  s11 s15   <<< 3 bytes
 */
void shift_rows(register uint8_t *state) {
 4e8:	0f 93       	push	r16
 4ea:	1f 93       	push	r17
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	cd b7       	in	r28, 0x3d	; 61
 4f2:	de b7       	in	r29, 0x3e	; 62
   register uint8_t temp,m;
    // row1
	temp        = *(state+1);
 4f4:	fc 01       	movw	r30, r24
 4f6:	01 81       	ldd	r16, Z+1	; 0x01
	for(m=1;m<13;m+=4)
 4f8:	11 e0       	ldi	r17, 0x01	; 1
 4fa:	0f c0       	rjmp	.+30     	; 0x51a <shift_rows+0x32>
	{
		*(state+m)  = *(state+m+4);
 4fc:	21 2f       	mov	r18, r17
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	28 0f       	add	r18, r24
 502:	39 1f       	adc	r19, r25
 504:	41 2f       	mov	r20, r17
 506:	50 e0       	ldi	r21, 0x00	; 0
 508:	4c 5f       	subi	r20, 0xFC	; 252
 50a:	5f 4f       	sbci	r21, 0xFF	; 255
 50c:	48 0f       	add	r20, r24
 50e:	59 1f       	adc	r21, r25
 510:	fa 01       	movw	r30, r20
 512:	40 81       	ld	r20, Z
 514:	f9 01       	movw	r30, r18
 516:	40 83       	st	Z, r20
 */
void shift_rows(register uint8_t *state) {
   register uint8_t temp,m;
    // row1
	temp        = *(state+1);
	for(m=1;m<13;m+=4)
 518:	1c 5f       	subi	r17, 0xFC	; 252
 51a:	1d 30       	cpi	r17, 0x0D	; 13
 51c:	78 f3       	brcs	.-34     	; 0x4fc <shift_rows+0x14>
	{
		*(state+m)  = *(state+m+4);
	}
	
    *(state+13) = temp;
 51e:	9c 01       	movw	r18, r24
 520:	23 5f       	subi	r18, 0xF3	; 243
 522:	3f 4f       	sbci	r19, 0xFF	; 255
 524:	f9 01       	movw	r30, r18
 526:	00 83       	st	Z, r16
    // row2
    temp        = *(state+2);
 528:	fc 01       	movw	r30, r24
 52a:	02 81       	ldd	r16, Z+2	; 0x02
    *(state+2)  = *(state+10);
 52c:	9c 01       	movw	r18, r24
 52e:	2e 5f       	subi	r18, 0xFE	; 254
 530:	3f 4f       	sbci	r19, 0xFF	; 255
 532:	fc 01       	movw	r30, r24
 534:	42 85       	ldd	r20, Z+10	; 0x0a
 536:	f9 01       	movw	r30, r18
 538:	40 83       	st	Z, r20
    *(state+10) = temp;
 53a:	9c 01       	movw	r18, r24
 53c:	26 5f       	subi	r18, 0xF6	; 246
 53e:	3f 4f       	sbci	r19, 0xFF	; 255
 540:	f9 01       	movw	r30, r18
 542:	00 83       	st	Z, r16
    temp        = *(state+6);
 544:	fc 01       	movw	r30, r24
 546:	06 81       	ldd	r16, Z+6	; 0x06
    *(state+6)  = *(state+14);
 548:	9c 01       	movw	r18, r24
 54a:	2a 5f       	subi	r18, 0xFA	; 250
 54c:	3f 4f       	sbci	r19, 0xFF	; 255
 54e:	fc 01       	movw	r30, r24
 550:	46 85       	ldd	r20, Z+14	; 0x0e
 552:	f9 01       	movw	r30, r18
 554:	40 83       	st	Z, r20
    *(state+14) = temp;
 556:	9c 01       	movw	r18, r24
 558:	22 5f       	subi	r18, 0xF2	; 242
 55a:	3f 4f       	sbci	r19, 0xFF	; 255
 55c:	f9 01       	movw	r30, r18
 55e:	00 83       	st	Z, r16
    // row3
    temp        = *(state+15);
 560:	fc 01       	movw	r30, r24
 562:	07 85       	ldd	r16, Z+15	; 0x0f
	for(m=15;m>3;m-=4)
 564:	1f e0       	ldi	r17, 0x0F	; 15
 566:	0f c0       	rjmp	.+30     	; 0x586 <shift_rows+0x9e>
	{*(state+m) = *(state+m-4);
 568:	21 2f       	mov	r18, r17
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	28 0f       	add	r18, r24
 56e:	39 1f       	adc	r19, r25
 570:	41 2f       	mov	r20, r17
 572:	50 e0       	ldi	r21, 0x00	; 0
 574:	44 50       	subi	r20, 0x04	; 4
 576:	51 09       	sbc	r21, r1
 578:	48 0f       	add	r20, r24
 57a:	59 1f       	adc	r21, r25
 57c:	fa 01       	movw	r30, r20
 57e:	40 81       	ld	r20, Z
 580:	f9 01       	movw	r30, r18
 582:	40 83       	st	Z, r20
    temp        = *(state+6);
    *(state+6)  = *(state+14);
    *(state+14) = temp;
    // row3
    temp        = *(state+15);
	for(m=15;m>3;m-=4)
 584:	14 50       	subi	r17, 0x04	; 4
 586:	14 30       	cpi	r17, 0x04	; 4
 588:	78 f7       	brcc	.-34     	; 0x568 <shift_rows+0x80>
	{*(state+m) = *(state+m-4);
	}
   
    *(state+3)  = temp;
 58a:	03 96       	adiw	r24, 0x03	; 3
 58c:	fc 01       	movw	r30, r24
 58e:	00 83       	st	Z, r16
}
 590:	00 00       	nop
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	08 95       	ret

0000059c <aes_encrypt_128>:

void aes_encrypt_128(register uint8_t *roundkeys,register uint8_t *plaintext, register uint8_t *ciphertext) {
 59c:	9f 92       	push	r9
 59e:	af 92       	push	r10
 5a0:	bf 92       	push	r11
 5a2:	cf 92       	push	r12
 5a4:	df 92       	push	r13
 5a6:	ef 92       	push	r14
 5a8:	ff 92       	push	r15
 5aa:	0f 93       	push	r16
 5ac:	1f 93       	push	r17
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	cd b7       	in	r28, 0x3d	; 61
 5b4:	de b7       	in	r29, 0x3e	; 62
 5b6:	61 97       	sbiw	r28, 0x11	; 17
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	f8 94       	cli
 5bc:	de bf       	out	0x3e, r29	; 62
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	cd bf       	out	0x3d, r28	; 61
 5c2:	6c 01       	movw	r12, r24
 5c4:	7a 01       	movw	r14, r20

    uint8_t tmp[16], t;
    register uint8_t i, j,x;

    // first AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 5c6:	10 e0       	ldi	r17, 0x00	; 0
 5c8:	16 c0       	rjmp	.+44     	; 0x5f6 <aes_encrypt_128+0x5a>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
 5ca:	81 2f       	mov	r24, r17
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	97 01       	movw	r18, r14
 5d0:	28 0f       	add	r18, r24
 5d2:	39 1f       	adc	r19, r25
 5d4:	81 2f       	mov	r24, r17
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	86 0f       	add	r24, r22
 5da:	97 1f       	adc	r25, r23
 5dc:	fc 01       	movw	r30, r24
 5de:	40 81       	ld	r20, Z
 5e0:	c6 01       	movw	r24, r12
 5e2:	6c 01       	movw	r12, r24
 5e4:	ff ef       	ldi	r31, 0xFF	; 255
 5e6:	cf 1a       	sub	r12, r31
 5e8:	df 0a       	sbc	r13, r31
 5ea:	fc 01       	movw	r30, r24
 5ec:	80 81       	ld	r24, Z
 5ee:	84 27       	eor	r24, r20
 5f0:	f9 01       	movw	r30, r18
 5f2:	80 83       	st	Z, r24

    uint8_t tmp[16], t;
    register uint8_t i, j,x;

    // first AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 5f4:	1f 5f       	subi	r17, 0xFF	; 255
 5f6:	10 31       	cpi	r17, 0x10	; 16
 5f8:	40 f3       	brcs	.-48     	; 0x5ca <aes_encrypt_128+0x2e>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
    }

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {
 5fa:	99 24       	eor	r9, r9
 5fc:	93 94       	inc	r9
 5fe:	db c0       	rjmp	.+438    	; 0x7b6 <aes_encrypt_128+0x21a>

        // SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 600:	10 e0       	ldi	r17, 0x00	; 0
 602:	16 c0       	rjmp	.+44     	; 0x630 <aes_encrypt_128+0x94>
            *(tmp+i) = SBOX[*(ciphertext+i)];
 604:	81 2f       	mov	r24, r17
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	9e 01       	movw	r18, r28
 60a:	2e 5f       	subi	r18, 0xFE	; 254
 60c:	3f 4f       	sbci	r19, 0xFF	; 255
 60e:	82 0f       	add	r24, r18
 610:	93 1f       	adc	r25, r19
 612:	21 2f       	mov	r18, r17
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	2e 0d       	add	r18, r14
 618:	3f 1d       	adc	r19, r15
 61a:	f9 01       	movw	r30, r18
 61c:	20 81       	ld	r18, Z
 61e:	22 2f       	mov	r18, r18
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	20 50       	subi	r18, 0x00	; 0
 624:	3e 4f       	sbci	r19, 0xFE	; 254
 626:	f9 01       	movw	r30, r18
 628:	20 81       	ld	r18, Z
 62a:	fc 01       	movw	r30, r24
 62c:	20 83       	st	Z, r18

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {

        // SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 62e:	1f 5f       	subi	r17, 0xFF	; 255
 630:	10 31       	cpi	r17, 0x10	; 16
 632:	40 f3       	brcs	.-48     	; 0x604 <aes_encrypt_128+0x68>
            *(tmp+i) = SBOX[*(ciphertext+i)];
        }
        shift_rows(tmp);
 634:	ce 01       	movw	r24, r28
 636:	02 96       	adiw	r24, 0x02	; 2
 638:	0e 94 74 02 	call	0x4e8	; 0x4e8 <shift_rows>
         * [02 03 01 01]   [s0  s4  s8  s12]
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4){  
 63c:	10 e0       	ldi	r17, 0x00	; 0
 63e:	9e c0       	rjmp	.+316    	; 0x77c <aes_encrypt_128+0x1e0>
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
 640:	81 2f       	mov	r24, r17
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	9e 01       	movw	r18, r28
 646:	2e 5f       	subi	r18, 0xFE	; 254
 648:	3f 4f       	sbci	r19, 0xFF	; 255
 64a:	82 0f       	add	r24, r18
 64c:	93 1f       	adc	r25, r19
 64e:	fc 01       	movw	r30, r24
 650:	40 81       	ld	r20, Z
 652:	81 2f       	mov	r24, r17
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	01 96       	adiw	r24, 0x01	; 1
 658:	9e 01       	movw	r18, r28
 65a:	2e 5f       	subi	r18, 0xFE	; 254
 65c:	3f 4f       	sbci	r19, 0xFF	; 255
 65e:	82 0f       	add	r24, r18
 660:	93 1f       	adc	r25, r19
 662:	fc 01       	movw	r30, r24
 664:	80 81       	ld	r24, Z
 666:	48 27       	eor	r20, r24
 668:	81 2f       	mov	r24, r17
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	02 96       	adiw	r24, 0x02	; 2
 66e:	9e 01       	movw	r18, r28
 670:	2e 5f       	subi	r18, 0xFE	; 254
 672:	3f 4f       	sbci	r19, 0xFF	; 255
 674:	82 0f       	add	r24, r18
 676:	93 1f       	adc	r25, r19
 678:	fc 01       	movw	r30, r24
 67a:	80 81       	ld	r24, Z
 67c:	48 27       	eor	r20, r24
 67e:	81 2f       	mov	r24, r17
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	03 96       	adiw	r24, 0x03	; 3
 684:	9e 01       	movw	r18, r28
 686:	2e 5f       	subi	r18, 0xFE	; 254
 688:	3f 4f       	sbci	r19, 0xFF	; 255
 68a:	82 0f       	add	r24, r18
 68c:	93 1f       	adc	r25, r19
 68e:	fc 01       	movw	r30, r24
 690:	80 81       	ld	r24, Z
 692:	84 27       	eor	r24, r20
 694:	89 83       	std	Y+1, r24	; 0x01
			for(x=0;x<3;x++)
 696:	00 e0       	ldi	r16, 0x00	; 0
 698:	40 c0       	rjmp	.+128    	; 0x71a <aes_encrypt_128+0x17e>
			{
				ciphertext[i+x]   = mul2(tmp[i+x]   ^ tmp[i+1+x]) ^ tmp[i+x]   ^ t;
 69a:	21 2f       	mov	r18, r17
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	80 2f       	mov	r24, r16
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	82 0f       	add	r24, r18
 6a4:	93 1f       	adc	r25, r19
 6a6:	57 01       	movw	r10, r14
 6a8:	a8 0e       	add	r10, r24
 6aa:	b9 1e       	adc	r11, r25
 6ac:	21 2f       	mov	r18, r17
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	80 2f       	mov	r24, r16
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	82 0f       	add	r24, r18
 6b6:	93 1f       	adc	r25, r19
 6b8:	9e 01       	movw	r18, r28
 6ba:	2e 5f       	subi	r18, 0xFE	; 254
 6bc:	3f 4f       	sbci	r19, 0xFF	; 255
 6be:	82 0f       	add	r24, r18
 6c0:	93 1f       	adc	r25, r19
 6c2:	fc 01       	movw	r30, r24
 6c4:	40 81       	ld	r20, Z
 6c6:	81 2f       	mov	r24, r17
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	9c 01       	movw	r18, r24
 6cc:	2f 5f       	subi	r18, 0xFF	; 255
 6ce:	3f 4f       	sbci	r19, 0xFF	; 255
 6d0:	80 2f       	mov	r24, r16
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	82 0f       	add	r24, r18
 6d6:	93 1f       	adc	r25, r19
 6d8:	9e 01       	movw	r18, r28
 6da:	2e 5f       	subi	r18, 0xFE	; 254
 6dc:	3f 4f       	sbci	r19, 0xFF	; 255
 6de:	82 0f       	add	r24, r18
 6e0:	93 1f       	adc	r25, r19
 6e2:	fc 01       	movw	r30, r24
 6e4:	80 81       	ld	r24, Z
 6e6:	84 27       	eor	r24, r20
 6e8:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 6ec:	48 2f       	mov	r20, r24
 6ee:	21 2f       	mov	r18, r17
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	80 2f       	mov	r24, r16
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	82 0f       	add	r24, r18
 6f8:	93 1f       	adc	r25, r19
 6fa:	9e 01       	movw	r18, r28
 6fc:	2e 5f       	subi	r18, 0xFE	; 254
 6fe:	3f 4f       	sbci	r19, 0xFF	; 255
 700:	82 0f       	add	r24, r18
 702:	93 1f       	adc	r25, r19
 704:	fc 01       	movw	r30, r24
 706:	80 81       	ld	r24, Z
 708:	94 2f       	mov	r25, r20
 70a:	98 27       	eor	r25, r24
 70c:	89 81       	ldd	r24, Y+1	; 0x01
 70e:	89 27       	eor	r24, r25
 710:	f5 01       	movw	r30, r10
 712:	80 83       	st	Z, r24
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4){  
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
			for(x=0;x<3;x++)
 714:	80 2f       	mov	r24, r16
 716:	01 e0       	ldi	r16, 0x01	; 1
 718:	08 0f       	add	r16, r24
 71a:	03 30       	cpi	r16, 0x03	; 3
 71c:	08 f4       	brcc	.+2      	; 0x720 <aes_encrypt_128+0x184>
 71e:	bd cf       	rjmp	.-134    	; 0x69a <aes_encrypt_128+0xfe>
			{
				ciphertext[i+x]   = mul2(tmp[i+x]   ^ tmp[i+1+x]) ^ tmp[i+x]   ^ t;
			}

            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
 720:	81 2f       	mov	r24, r17
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	03 96       	adiw	r24, 0x03	; 3
 726:	57 01       	movw	r10, r14
 728:	a8 0e       	add	r10, r24
 72a:	b9 1e       	adc	r11, r25
 72c:	81 2f       	mov	r24, r17
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	03 96       	adiw	r24, 0x03	; 3
 732:	9e 01       	movw	r18, r28
 734:	2e 5f       	subi	r18, 0xFE	; 254
 736:	3f 4f       	sbci	r19, 0xFF	; 255
 738:	82 0f       	add	r24, r18
 73a:	93 1f       	adc	r25, r19
 73c:	fc 01       	movw	r30, r24
 73e:	40 81       	ld	r20, Z
 740:	81 2f       	mov	r24, r17
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	9e 01       	movw	r18, r28
 746:	2e 5f       	subi	r18, 0xFE	; 254
 748:	3f 4f       	sbci	r19, 0xFF	; 255
 74a:	82 0f       	add	r24, r18
 74c:	93 1f       	adc	r25, r19
 74e:	fc 01       	movw	r30, r24
 750:	80 81       	ld	r24, Z
 752:	84 27       	eor	r24, r20
 754:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 758:	48 2f       	mov	r20, r24
 75a:	81 2f       	mov	r24, r17
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	03 96       	adiw	r24, 0x03	; 3
 760:	9e 01       	movw	r18, r28
 762:	2e 5f       	subi	r18, 0xFE	; 254
 764:	3f 4f       	sbci	r19, 0xFF	; 255
 766:	82 0f       	add	r24, r18
 768:	93 1f       	adc	r25, r19
 76a:	fc 01       	movw	r30, r24
 76c:	80 81       	ld	r24, Z
 76e:	94 2f       	mov	r25, r20
 770:	98 27       	eor	r25, r24
 772:	89 81       	ldd	r24, Y+1	; 0x01
 774:	89 27       	eor	r24, r25
 776:	f5 01       	movw	r30, r10
 778:	80 83       	st	Z, r24
         * [02 03 01 01]   [s0  s4  s8  s12]
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4){  
 77a:	1c 5f       	subi	r17, 0xFC	; 252
 77c:	10 31       	cpi	r17, 0x10	; 16
 77e:	08 f4       	brcc	.+2      	; 0x782 <aes_encrypt_128+0x1e6>
 780:	5f cf       	rjmp	.-322    	; 0x640 <aes_encrypt_128+0xa4>

            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
        }

        // AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 782:	10 e0       	ldi	r17, 0x00	; 0
 784:	15 c0       	rjmp	.+42     	; 0x7b0 <aes_encrypt_128+0x214>
            *(ciphertext+i) ^= *roundkeys++;
 786:	c6 01       	movw	r24, r12
 788:	6c 01       	movw	r12, r24
 78a:	ff ef       	ldi	r31, 0xFF	; 255
 78c:	cf 1a       	sub	r12, r31
 78e:	df 0a       	sbc	r13, r31
 790:	fc 01       	movw	r30, r24
 792:	40 81       	ld	r20, Z
 794:	81 2f       	mov	r24, r17
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	8e 0d       	add	r24, r14
 79a:	9f 1d       	adc	r25, r15
 79c:	21 2f       	mov	r18, r17
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	2e 0d       	add	r18, r14
 7a2:	3f 1d       	adc	r19, r15
 7a4:	f9 01       	movw	r30, r18
 7a6:	20 81       	ld	r18, Z
 7a8:	24 27       	eor	r18, r20
 7aa:	fc 01       	movw	r30, r24
 7ac:	20 83       	st	Z, r18

            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
        }

        // AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 7ae:	1f 5f       	subi	r17, 0xFF	; 255
 7b0:	10 31       	cpi	r17, 0x10	; 16
 7b2:	48 f3       	brcs	.-46     	; 0x786 <aes_encrypt_128+0x1ea>
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
    }

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {
 7b4:	93 94       	inc	r9
 7b6:	f9 e0       	ldi	r31, 0x09	; 9
 7b8:	f9 15       	cp	r31, r9
 7ba:	08 f0       	brcs	.+2      	; 0x7be <aes_encrypt_128+0x222>
 7bc:	21 cf       	rjmp	.-446    	; 0x600 <aes_encrypt_128+0x64>
        }

    }
    
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 7be:	10 e0       	ldi	r17, 0x00	; 0
 7c0:	13 c0       	rjmp	.+38     	; 0x7e8 <aes_encrypt_128+0x24c>
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
 7c2:	81 2f       	mov	r24, r17
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	8e 0d       	add	r24, r14
 7c8:	9f 1d       	adc	r25, r15
 7ca:	21 2f       	mov	r18, r17
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	2e 0d       	add	r18, r14
 7d0:	3f 1d       	adc	r19, r15
 7d2:	f9 01       	movw	r30, r18
 7d4:	20 81       	ld	r18, Z
 7d6:	22 2f       	mov	r18, r18
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	20 50       	subi	r18, 0x00	; 0
 7dc:	3e 4f       	sbci	r19, 0xFE	; 254
 7de:	f9 01       	movw	r30, r18
 7e0:	20 81       	ld	r18, Z
 7e2:	fc 01       	movw	r30, r24
 7e4:	20 83       	st	Z, r18
        }

    }
    
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 7e6:	1f 5f       	subi	r17, 0xFF	; 255
 7e8:	10 31       	cpi	r17, 0x10	; 16
 7ea:	58 f3       	brcs	.-42     	; 0x7c2 <aes_encrypt_128+0x226>
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
    }
    shift_rows(ciphertext);
 7ec:	c7 01       	movw	r24, r14
 7ee:	0e 94 74 02 	call	0x4e8	; 0x4e8 <shift_rows>
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 7f2:	10 e0       	ldi	r17, 0x00	; 0
 7f4:	15 c0       	rjmp	.+42     	; 0x820 <aes_encrypt_128+0x284>
        *(ciphertext+i) ^= *roundkeys++;
 7f6:	c6 01       	movw	r24, r12
 7f8:	6c 01       	movw	r12, r24
 7fa:	ff ef       	ldi	r31, 0xFF	; 255
 7fc:	cf 1a       	sub	r12, r31
 7fe:	df 0a       	sbc	r13, r31
 800:	fc 01       	movw	r30, r24
 802:	40 81       	ld	r20, Z
 804:	81 2f       	mov	r24, r17
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	8e 0d       	add	r24, r14
 80a:	9f 1d       	adc	r25, r15
 80c:	21 2f       	mov	r18, r17
 80e:	30 e0       	ldi	r19, 0x00	; 0
 810:	2e 0d       	add	r18, r14
 812:	3f 1d       	adc	r19, r15
 814:	f9 01       	movw	r30, r18
 816:	20 81       	ld	r18, Z
 818:	24 27       	eor	r18, r20
 81a:	fc 01       	movw	r30, r24
 81c:	20 83       	st	Z, r18
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
    }
    shift_rows(ciphertext);
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 81e:	1f 5f       	subi	r17, 0xFF	; 255
 820:	10 31       	cpi	r17, 0x10	; 16
 822:	48 f3       	brcs	.-46     	; 0x7f6 <aes_encrypt_128+0x25a>
        *(ciphertext+i) ^= *roundkeys++;
    }

}
 824:	00 00       	nop
 826:	61 96       	adiw	r28, 0x11	; 17
 828:	0f b6       	in	r0, 0x3f	; 63
 82a:	f8 94       	cli
 82c:	de bf       	out	0x3e, r29	; 62
 82e:	0f be       	out	0x3f, r0	; 63
 830:	cd bf       	out	0x3d, r28	; 61
 832:	df 91       	pop	r29
 834:	cf 91       	pop	r28
 836:	1f 91       	pop	r17
 838:	0f 91       	pop	r16
 83a:	ff 90       	pop	r15
 83c:	ef 90       	pop	r14
 83e:	df 90       	pop	r13
 840:	cf 90       	pop	r12
 842:	bf 90       	pop	r11
 844:	af 90       	pop	r10
 846:	9f 90       	pop	r9
 848:	08 95       	ret

0000084a <aes_key_schedule_128>:
#include "Common.h"
/*
 * round constants
 */

void aes_key_schedule_128(register uint8_t *key, register uint8_t *roundkeys) {
 84a:	cf 92       	push	r12
 84c:	df 92       	push	r13
 84e:	ef 92       	push	r14
 850:	ff 92       	push	r15
 852:	0f 93       	push	r16
 854:	1f 93       	push	r17
 856:	cf 93       	push	r28
 858:	df 93       	push	r29
 85a:	00 d0       	rcall	.+0      	; 0x85c <aes_key_schedule_128+0x12>
 85c:	00 d0       	rcall	.+0      	; 0x85e <aes_key_schedule_128+0x14>
 85e:	cd b7       	in	r28, 0x3d	; 61
 860:	de b7       	in	r29, 0x3e	; 62
 862:	fc 01       	movw	r30, r24
 864:	cb 01       	movw	r24, r22

    uint8_t temp[4];
  
   register  uint8_t i,j=0,*last4bytes,*lastround;
 866:	f1 2c       	mov	r15, r1

    for (i = 0; i < 16; ++i) {
 868:	e1 2c       	mov	r14, r1
 86a:	0b c0       	rjmp	.+22     	; 0x882 <aes_key_schedule_128+0x38>
        *roundkeys++ = *key++;
 86c:	9c 01       	movw	r18, r24
 86e:	c9 01       	movw	r24, r18
 870:	01 96       	adiw	r24, 0x01	; 1
 872:	af 01       	movw	r20, r30
 874:	fa 01       	movw	r30, r20
 876:	31 96       	adiw	r30, 0x01	; 1
 878:	da 01       	movw	r26, r20
 87a:	4c 91       	ld	r20, X
 87c:	d9 01       	movw	r26, r18
 87e:	4c 93       	st	X, r20

    uint8_t temp[4];
  
   register  uint8_t i,j=0,*last4bytes,*lastround;

    for (i = 0; i < 16; ++i) {
 880:	e3 94       	inc	r14
 882:	bf e0       	ldi	r27, 0x0F	; 15
 884:	be 15       	cp	r27, r14
 886:	90 f7       	brcc	.-28     	; 0x86c <aes_key_schedule_128+0x22>
        *roundkeys++ = *key++;
    }

    last4bytes = roundkeys-4;
 888:	8c 01       	movw	r16, r24
 88a:	04 50       	subi	r16, 0x04	; 4
 88c:	11 09       	sbc	r17, r1
    for (i = 0; i < AES_ROUNDS; ++i) {
 88e:	e1 2c       	mov	r14, r1
 890:	6b c0       	rjmp	.+214    	; 0x968 <__stack+0x69>
        // k0-k3 for next round
        temp[3] = SBOX[*last4bytes++];
 892:	98 01       	movw	r18, r16
 894:	89 01       	movw	r16, r18
 896:	0f 5f       	subi	r16, 0xFF	; 255
 898:	1f 4f       	sbci	r17, 0xFF	; 255
 89a:	f9 01       	movw	r30, r18
 89c:	20 81       	ld	r18, Z
 89e:	22 2f       	mov	r18, r18
 8a0:	30 e0       	ldi	r19, 0x00	; 0
 8a2:	20 50       	subi	r18, 0x00	; 0
 8a4:	3e 4f       	sbci	r19, 0xFE	; 254
 8a6:	d9 01       	movw	r26, r18
 8a8:	2c 91       	ld	r18, X
 8aa:	2c 83       	std	Y+4, r18	; 0x04
		for(j=0;j<3;j++)
 8ac:	f1 2c       	mov	r15, r1
 8ae:	19 c0       	rjmp	.+50     	; 0x8e2 <aes_key_schedule_128+0x98>
		{
			temp[j] = SBOX[*last4bytes++];
 8b0:	4f 2d       	mov	r20, r15
 8b2:	50 e0       	ldi	r21, 0x00	; 0
 8b4:	98 01       	movw	r18, r16
 8b6:	89 01       	movw	r16, r18
 8b8:	0f 5f       	subi	r16, 0xFF	; 255
 8ba:	1f 4f       	sbci	r17, 0xFF	; 255
 8bc:	f9 01       	movw	r30, r18
 8be:	20 81       	ld	r18, Z
 8c0:	22 2f       	mov	r18, r18
 8c2:	30 e0       	ldi	r19, 0x00	; 0
 8c4:	20 50       	subi	r18, 0x00	; 0
 8c6:	3e 4f       	sbci	r19, 0xFE	; 254
 8c8:	d9 01       	movw	r26, r18
 8ca:	6c 91       	ld	r22, X
 8cc:	9e 01       	movw	r18, r28
 8ce:	2f 5f       	subi	r18, 0xFF	; 255
 8d0:	3f 4f       	sbci	r19, 0xFF	; 255
 8d2:	24 0f       	add	r18, r20
 8d4:	35 1f       	adc	r19, r21
 8d6:	f9 01       	movw	r30, r18
 8d8:	60 83       	st	Z, r22

    last4bytes = roundkeys-4;
    for (i = 0; i < AES_ROUNDS; ++i) {
        // k0-k3 for next round
        temp[3] = SBOX[*last4bytes++];
		for(j=0;j<3;j++)
 8da:	2f 2d       	mov	r18, r15
 8dc:	ff 24       	eor	r15, r15
 8de:	f3 94       	inc	r15
 8e0:	f2 0e       	add	r15, r18
 8e2:	f2 e0       	ldi	r31, 0x02	; 2
 8e4:	ff 15       	cp	r31, r15
 8e6:	20 f7       	brcc	.-56     	; 0x8b0 <aes_key_schedule_128+0x66>
		{
			temp[j] = SBOX[*last4bytes++];
		}
        
      
        lastround = roundkeys-16;
 8e8:	6c 01       	movw	r12, r24
 8ea:	20 e1       	ldi	r18, 0x10	; 16
 8ec:	c2 1a       	sub	r12, r18
 8ee:	d1 08       	sbc	r13, r1
		for(j=0;j<4;j++)
 8f0:	f1 2c       	mov	r15, r1
 8f2:	1a c0       	rjmp	.+52     	; 0x928 <__stack+0x29>
		{*roundkeys++ = temp[j] ^ *lastround++;
 8f4:	9c 01       	movw	r18, r24
 8f6:	c9 01       	movw	r24, r18
 8f8:	01 96       	adiw	r24, 0x01	; 1
 8fa:	4f 2d       	mov	r20, r15
 8fc:	50 e0       	ldi	r21, 0x00	; 0
 8fe:	be 01       	movw	r22, r28
 900:	6f 5f       	subi	r22, 0xFF	; 255
 902:	7f 4f       	sbci	r23, 0xFF	; 255
 904:	46 0f       	add	r20, r22
 906:	57 1f       	adc	r21, r23
 908:	da 01       	movw	r26, r20
 90a:	6c 91       	ld	r22, X
 90c:	a6 01       	movw	r20, r12
 90e:	6a 01       	movw	r12, r20
 910:	bf ef       	ldi	r27, 0xFF	; 255
 912:	cb 1a       	sub	r12, r27
 914:	db 0a       	sbc	r13, r27
 916:	fa 01       	movw	r30, r20
 918:	40 81       	ld	r20, Z
 91a:	46 27       	eor	r20, r22
 91c:	d9 01       	movw	r26, r18
 91e:	4c 93       	st	X, r20
			temp[j] = SBOX[*last4bytes++];
		}
        
      
        lastround = roundkeys-16;
		for(j=0;j<4;j++)
 920:	2f 2d       	mov	r18, r15
 922:	ff 24       	eor	r15, r15
 924:	f3 94       	inc	r15
 926:	f2 0e       	add	r15, r18
 928:	b3 e0       	ldi	r27, 0x03	; 3
 92a:	bf 15       	cp	r27, r15
 92c:	18 f7       	brcc	.-58     	; 0x8f4 <aes_key_schedule_128+0xaa>
		{*roundkeys++ = temp[j] ^ *lastround++;
			
		}
		
      for(j=0;j<12;j++)
 92e:	f1 2c       	mov	r15, r1
 930:	17 c0       	rjmp	.+46     	; 0x960 <__stack+0x61>
	  {
		  *roundkeys++ = *last4bytes++ ^ *lastround++;
 932:	9c 01       	movw	r18, r24
 934:	c9 01       	movw	r24, r18
 936:	01 96       	adiw	r24, 0x01	; 1
 938:	a8 01       	movw	r20, r16
 93a:	8a 01       	movw	r16, r20
 93c:	0f 5f       	subi	r16, 0xFF	; 255
 93e:	1f 4f       	sbci	r17, 0xFF	; 255
 940:	fa 01       	movw	r30, r20
 942:	60 81       	ld	r22, Z
 944:	a6 01       	movw	r20, r12
 946:	6a 01       	movw	r12, r20
 948:	ff ef       	ldi	r31, 0xFF	; 255
 94a:	cf 1a       	sub	r12, r31
 94c:	df 0a       	sbc	r13, r31
 94e:	da 01       	movw	r26, r20
 950:	4c 91       	ld	r20, X
 952:	46 27       	eor	r20, r22
 954:	f9 01       	movw	r30, r18
 956:	40 83       	st	Z, r20
		for(j=0;j<4;j++)
		{*roundkeys++ = temp[j] ^ *lastround++;
			
		}
		
      for(j=0;j<12;j++)
 958:	2f 2d       	mov	r18, r15
 95a:	ff 24       	eor	r15, r15
 95c:	f3 94       	inc	r15
 95e:	f2 0e       	add	r15, r18
 960:	fb e0       	ldi	r31, 0x0B	; 11
 962:	ff 15       	cp	r31, r15
 964:	30 f7       	brcc	.-52     	; 0x932 <__stack+0x33>
    for (i = 0; i < 16; ++i) {
        *roundkeys++ = *key++;
    }

    last4bytes = roundkeys-4;
    for (i = 0; i < AES_ROUNDS; ++i) {
 966:	e3 94       	inc	r14
 968:	29 e0       	ldi	r18, 0x09	; 9
 96a:	2e 15       	cp	r18, r14
 96c:	08 f0       	brcs	.+2      	; 0x970 <__stack+0x71>
 96e:	91 cf       	rjmp	.-222    	; 0x892 <aes_key_schedule_128+0x48>
		  *roundkeys++ = *last4bytes++ ^ *lastround++;
		  
	  }      

    }
}
 970:	00 00       	nop
 972:	0f 90       	pop	r0
 974:	0f 90       	pop	r0
 976:	0f 90       	pop	r0
 978:	0f 90       	pop	r0
 97a:	df 91       	pop	r29
 97c:	cf 91       	pop	r28
 97e:	1f 91       	pop	r17
 980:	0f 91       	pop	r16
 982:	ff 90       	pop	r15
 984:	ef 90       	pop	r14
 986:	df 90       	pop	r13
 988:	cf 90       	pop	r12
 98a:	08 95       	ret

0000098c <main>:
 */
//#include <avr/io.h>

#include "Common.h"

int main(int argc, char *argv[]) {
 98c:	0f 93       	push	r16
 98e:	1f 93       	push	r17
 990:	cf 93       	push	r28
 992:	df 93       	push	r29
 994:	cd b7       	in	r28, 0x3d	; 61
 996:	de b7       	in	r29, 0x3e	; 62
 998:	c4 5e       	subi	r28, 0xE4	; 228
 99a:	d1 09       	sbc	r29, r1
 99c:	0f b6       	in	r0, 0x3f	; 63
 99e:	f8 94       	cli
 9a0:	de bf       	out	0x3e, r29	; 62
 9a2:	0f be       	out	0x3f, r0	; 63
 9a4:	cd bf       	out	0x3d, r28	; 61
 9a6:	9e 01       	movw	r18, r28
 9a8:	2f 51       	subi	r18, 0x1F	; 31
 9aa:	3f 4f       	sbci	r19, 0xFF	; 255
 9ac:	f9 01       	movw	r30, r18
 9ae:	91 83       	std	Z+1, r25	; 0x01
 9b0:	80 83       	st	Z, r24
 9b2:	ce 01       	movw	r24, r28
 9b4:	8d 51       	subi	r24, 0x1D	; 29
 9b6:	9f 4f       	sbci	r25, 0xFF	; 255
 9b8:	fc 01       	movw	r30, r24
 9ba:	71 83       	std	Z+1, r23	; 0x01
 9bc:	60 83       	st	Z, r22


	/* 128 bit key */

	uint8_t plaintext[16] ;
	for(i=0;i<255;i+=17){
 9be:	10 e0       	ldi	r17, 0x00	; 0
 9c0:	0d c0       	rjmp	.+26     	; 0x9dc <main+0x50>
		
		plaintext[j]=i;
 9c2:	80 2f       	mov	r24, r16
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	9e 01       	movw	r18, r28
 9c8:	2f 5f       	subi	r18, 0xFF	; 255
 9ca:	3f 4f       	sbci	r19, 0xFF	; 255
 9cc:	82 0f       	add	r24, r18
 9ce:	93 1f       	adc	r25, r19
 9d0:	fc 01       	movw	r30, r24
 9d2:	10 83       	st	Z, r17
		j++;
 9d4:	80 2f       	mov	r24, r16
 9d6:	01 e0       	ldi	r16, 0x01	; 1
 9d8:	08 0f       	add	r16, r24


	/* 128 bit key */

	uint8_t plaintext[16] ;
	for(i=0;i<255;i+=17){
 9da:	1f 5e       	subi	r17, 0xEF	; 239
 9dc:	1f 3f       	cpi	r17, 0xFF	; 255
 9de:	89 f7       	brne	.-30     	; 0x9c2 <main+0x36>
		
		plaintext[j]=i;
		j++;
	}
	uint8_t key[16];
	for(i=0;i<16;i++){
 9e0:	10 e0       	ldi	r17, 0x00	; 0
 9e2:	0c c0       	rjmp	.+24     	; 0x9fc <main+0x70>
		key[i]=i;
 9e4:	81 2f       	mov	r24, r17
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	9e 01       	movw	r18, r28
 9ea:	2f 5e       	subi	r18, 0xEF	; 239
 9ec:	3f 4f       	sbci	r19, 0xFF	; 255
 9ee:	82 0f       	add	r24, r18
 9f0:	93 1f       	adc	r25, r19
 9f2:	fc 01       	movw	r30, r24
 9f4:	10 83       	st	Z, r17
		
		plaintext[j]=i;
		j++;
	}
	uint8_t key[16];
	for(i=0;i<16;i++){
 9f6:	81 2f       	mov	r24, r17
 9f8:	11 e0       	ldi	r17, 0x01	; 1
 9fa:	18 0f       	add	r17, r24
 9fc:	10 31       	cpi	r17, 0x10	; 16
 9fe:	90 f3       	brcs	.-28     	; 0x9e4 <main+0x58>
		key[i]=i;
	}
	uint8_t ciphertext[AES_BLOCK_SIZE];
	uint8_t roundkeys[AES_ROUND_KEY_SIZE];
	// key schedule
	aes_key_schedule_128(key, roundkeys);
 a00:	9e 01       	movw	r18, r28
 a02:	2f 5c       	subi	r18, 0xCF	; 207
 a04:	3f 4f       	sbci	r19, 0xFF	; 255
 a06:	ce 01       	movw	r24, r28
 a08:	41 96       	adiw	r24, 0x11	; 17
 a0a:	b9 01       	movw	r22, r18
 a0c:	0e 94 25 04 	call	0x84a	; 0x84a <aes_key_schedule_128>
	// encryption
	aes_encrypt_128(roundkeys, plaintext, ciphertext);
 a10:	9e 01       	movw	r18, r28
 a12:	2f 5d       	subi	r18, 0xDF	; 223
 a14:	3f 4f       	sbci	r19, 0xFF	; 255
 a16:	ce 01       	movw	r24, r28
 a18:	c1 96       	adiw	r24, 0x31	; 49
 a1a:	a9 01       	movw	r20, r18
 a1c:	9e 01       	movw	r18, r28
 a1e:	2f 5f       	subi	r18, 0xFF	; 255
 a20:	3f 4f       	sbci	r19, 0xFF	; 255
 a22:	b9 01       	movw	r22, r18
 a24:	0e 94 ce 02 	call	0x59c	; 0x59c <aes_encrypt_128>

	// decryption
	aes_decrypt_128(roundkeys, ciphertext,ciphertext);
 a28:	ae 01       	movw	r20, r28
 a2a:	4f 5d       	subi	r20, 0xDF	; 223
 a2c:	5f 4f       	sbci	r21, 0xFF	; 255
 a2e:	9e 01       	movw	r18, r28
 a30:	2f 5d       	subi	r18, 0xDF	; 223
 a32:	3f 4f       	sbci	r19, 0xFF	; 255
 a34:	ce 01       	movw	r24, r28
 a36:	c1 96       	adiw	r24, 0x31	; 49
 a38:	b9 01       	movw	r22, r18
 a3a:	0e 94 b8 00 	call	0x170	; 0x170 <aes_decrypt_128>

	return 0;
 a3e:	80 e0       	ldi	r24, 0x00	; 0
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	cc 51       	subi	r28, 0x1C	; 28
 a44:	df 4f       	sbci	r29, 0xFF	; 255
 a46:	0f b6       	in	r0, 0x3f	; 63
 a48:	f8 94       	cli
 a4a:	de bf       	out	0x3e, r29	; 62
 a4c:	0f be       	out	0x3f, r0	; 63
 a4e:	cd bf       	out	0x3d, r28	; 61
 a50:	df 91       	pop	r29
 a52:	cf 91       	pop	r28
 a54:	1f 91       	pop	r17
 a56:	0f 91       	pop	r16
 a58:	08 95       	ret

00000a5a <_exit>:
 a5a:	f8 94       	cli

00000a5c <__stop_program>:
 a5c:	ff cf       	rjmp	.-2      	; 0xa5c <__stop_program>
