
MOTOR_PWM_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a92  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000ae6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000ae6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b18  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c4  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000671  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000069b  00000000  00000000  00001a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  000020bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ad  00000000  00000000  000021ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001eb  00000000  00000000  00002599  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002784  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 06 02 	call	0x40c	; 0x40c <main>
  64:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_WritePin>:
	else if((PinNum>=PIN16)&&(PinNum<=PIN23)) /* PORTD 24~31 */
	{
		return (Get_bit(PIND,(PinNum-PIN24)));
	}
	else {return LOW;}
}
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_WritePin+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  76:	89 83       	std	Y+1, r24	; 0x01
  78:	6a 83       	std	Y+2, r22	; 0x02
  7a:	89 81       	ldd	r24, Y+1	; 0x01
  7c:	88 30       	cpi	r24, 0x08	; 8
  7e:	68 f5       	brcc	.+90     	; 0xda <DIO_WritePin+0x6e>
  80:	8a 81       	ldd	r24, Y+2	; 0x02
  82:	88 23       	and	r24, r24
  84:	a9 f0       	breq	.+42     	; 0xb0 <DIO_WritePin+0x44>
  86:	8b e3       	ldi	r24, 0x3B	; 59
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	2b e3       	ldi	r18, 0x3B	; 59
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	f9 01       	movw	r30, r18
  90:	20 81       	ld	r18, Z
  92:	62 2f       	mov	r22, r18
  94:	29 81       	ldd	r18, Y+1	; 0x01
  96:	42 2f       	mov	r20, r18
  98:	50 e0       	ldi	r21, 0x00	; 0
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <DIO_WritePin+0x38>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	4a 95       	dec	r20
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <DIO_WritePin+0x34>
  a8:	26 2b       	or	r18, r22
  aa:	fc 01       	movw	r30, r24
  ac:	20 83       	st	Z, r18
  ae:	c1 c0       	rjmp	.+386    	; 0x232 <DIO_WritePin+0x1c6>
  b0:	8b e3       	ldi	r24, 0x3B	; 59
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	2b e3       	ldi	r18, 0x3B	; 59
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	f9 01       	movw	r30, r18
  ba:	60 81       	ld	r22, Z
  bc:	29 81       	ldd	r18, Y+1	; 0x01
  be:	42 2f       	mov	r20, r18
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_WritePin+0x60>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	4a 95       	dec	r20
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_WritePin+0x5c>
  d0:	20 95       	com	r18
  d2:	26 23       	and	r18, r22
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
  d8:	ac c0       	rjmp	.+344    	; 0x232 <DIO_WritePin+0x1c6>
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	88 30       	cpi	r24, 0x08	; 8
  de:	b0 f1       	brcs	.+108    	; 0x14c <DIO_WritePin+0xe0>
  e0:	89 81       	ldd	r24, Y+1	; 0x01
  e2:	80 31       	cpi	r24, 0x10	; 16
  e4:	98 f5       	brcc	.+102    	; 0x14c <DIO_WritePin+0xe0>
  e6:	8a 81       	ldd	r24, Y+2	; 0x02
  e8:	88 23       	and	r24, r24
  ea:	c1 f0       	breq	.+48     	; 0x11c <DIO_WritePin+0xb0>
  ec:	88 e3       	ldi	r24, 0x38	; 56
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	28 e3       	ldi	r18, 0x38	; 56
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	20 81       	ld	r18, Z
  f8:	62 2f       	mov	r22, r18
  fa:	29 81       	ldd	r18, Y+1	; 0x01
  fc:	22 2f       	mov	r18, r18
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	a9 01       	movw	r20, r18
 102:	48 50       	subi	r20, 0x08	; 8
 104:	51 09       	sbc	r21, r1
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_WritePin+0xa4>
 10c:	22 0f       	add	r18, r18
 10e:	33 1f       	adc	r19, r19
 110:	4a 95       	dec	r20
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_WritePin+0xa0>
 114:	26 2b       	or	r18, r22
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
 11a:	8b c0       	rjmp	.+278    	; 0x232 <DIO_WritePin+0x1c6>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	28 e3       	ldi	r18, 0x38	; 56
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	f9 01       	movw	r30, r18
 126:	60 81       	ld	r22, Z
 128:	29 81       	ldd	r18, Y+1	; 0x01
 12a:	22 2f       	mov	r18, r18
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	a9 01       	movw	r20, r18
 130:	48 50       	subi	r20, 0x08	; 8
 132:	51 09       	sbc	r21, r1
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_WritePin+0xd2>
 13a:	22 0f       	add	r18, r18
 13c:	33 1f       	adc	r19, r19
 13e:	4a 95       	dec	r20
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_WritePin+0xce>
 142:	20 95       	com	r18
 144:	26 23       	and	r18, r22
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
 14a:	73 c0       	rjmp	.+230    	; 0x232 <DIO_WritePin+0x1c6>
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	80 31       	cpi	r24, 0x10	; 16
 150:	b0 f1       	brcs	.+108    	; 0x1be <DIO_WritePin+0x152>
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	88 31       	cpi	r24, 0x18	; 24
 156:	98 f5       	brcc	.+102    	; 0x1be <DIO_WritePin+0x152>
 158:	8a 81       	ldd	r24, Y+2	; 0x02
 15a:	88 23       	and	r24, r24
 15c:	c1 f0       	breq	.+48     	; 0x18e <DIO_WritePin+0x122>
 15e:	85 e3       	ldi	r24, 0x35	; 53
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	25 e3       	ldi	r18, 0x35	; 53
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	f9 01       	movw	r30, r18
 168:	20 81       	ld	r18, Z
 16a:	62 2f       	mov	r22, r18
 16c:	29 81       	ldd	r18, Y+1	; 0x01
 16e:	22 2f       	mov	r18, r18
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	a9 01       	movw	r20, r18
 174:	40 51       	subi	r20, 0x10	; 16
 176:	51 09       	sbc	r21, r1
 178:	21 e0       	ldi	r18, 0x01	; 1
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_WritePin+0x116>
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	4a 95       	dec	r20
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_WritePin+0x112>
 186:	26 2b       	or	r18, r22
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18
 18c:	52 c0       	rjmp	.+164    	; 0x232 <DIO_WritePin+0x1c6>
 18e:	85 e3       	ldi	r24, 0x35	; 53
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	25 e3       	ldi	r18, 0x35	; 53
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	60 81       	ld	r22, Z
 19a:	29 81       	ldd	r18, Y+1	; 0x01
 19c:	22 2f       	mov	r18, r18
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	a9 01       	movw	r20, r18
 1a2:	40 51       	subi	r20, 0x10	; 16
 1a4:	51 09       	sbc	r21, r1
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_WritePin+0x144>
 1ac:	22 0f       	add	r18, r18
 1ae:	33 1f       	adc	r19, r19
 1b0:	4a 95       	dec	r20
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_WritePin+0x140>
 1b4:	20 95       	com	r18
 1b6:	26 23       	and	r18, r22
 1b8:	fc 01       	movw	r30, r24
 1ba:	20 83       	st	Z, r18
 1bc:	3a c0       	rjmp	.+116    	; 0x232 <DIO_WritePin+0x1c6>
 1be:	89 81       	ldd	r24, Y+1	; 0x01
 1c0:	88 31       	cpi	r24, 0x18	; 24
 1c2:	b0 f1       	brcs	.+108    	; 0x230 <DIO_WritePin+0x1c4>
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	80 32       	cpi	r24, 0x20	; 32
 1c8:	98 f5       	brcc	.+102    	; 0x230 <DIO_WritePin+0x1c4>
 1ca:	8a 81       	ldd	r24, Y+2	; 0x02
 1cc:	88 23       	and	r24, r24
 1ce:	c1 f0       	breq	.+48     	; 0x200 <DIO_WritePin+0x194>
 1d0:	82 e3       	ldi	r24, 0x32	; 50
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	22 e3       	ldi	r18, 0x32	; 50
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	f9 01       	movw	r30, r18
 1da:	20 81       	ld	r18, Z
 1dc:	62 2f       	mov	r22, r18
 1de:	29 81       	ldd	r18, Y+1	; 0x01
 1e0:	22 2f       	mov	r18, r18
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	a9 01       	movw	r20, r18
 1e6:	48 51       	subi	r20, 0x18	; 24
 1e8:	51 09       	sbc	r21, r1
 1ea:	21 e0       	ldi	r18, 0x01	; 1
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_WritePin+0x188>
 1f0:	22 0f       	add	r18, r18
 1f2:	33 1f       	adc	r19, r19
 1f4:	4a 95       	dec	r20
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_WritePin+0x184>
 1f8:	26 2b       	or	r18, r22
 1fa:	fc 01       	movw	r30, r24
 1fc:	20 83       	st	Z, r18
 1fe:	19 c0       	rjmp	.+50     	; 0x232 <DIO_WritePin+0x1c6>
 200:	82 e3       	ldi	r24, 0x32	; 50
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	22 e3       	ldi	r18, 0x32	; 50
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	f9 01       	movw	r30, r18
 20a:	60 81       	ld	r22, Z
 20c:	29 81       	ldd	r18, Y+1	; 0x01
 20e:	22 2f       	mov	r18, r18
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	a9 01       	movw	r20, r18
 214:	48 51       	subi	r20, 0x18	; 24
 216:	51 09       	sbc	r21, r1
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_WritePin+0x1b6>
 21e:	22 0f       	add	r18, r18
 220:	33 1f       	adc	r19, r19
 222:	4a 95       	dec	r20
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_WritePin+0x1b2>
 226:	20 95       	com	r18
 228:	26 23       	and	r18, r22
 22a:	fc 01       	movw	r30, r24
 22c:	20 83       	st	Z, r18
 22e:	01 c0       	rjmp	.+2      	; 0x232 <DIO_WritePin+0x1c6>
 230:	00 00       	nop
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <DIO_SetPinDirection>:

 void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
 {    /* PORTA PIN0~PIN7 */
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	00 d0       	rcall	.+0      	; 0x242 <DIO_SetPinDirection+0x6>
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	89 83       	std	Y+1, r24	; 0x01
 248:	6a 83       	std	Y+2, r22	; 0x02
     	if((PinNum>=PIN0)&&(PinNum<=PIN7))
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	88 30       	cpi	r24, 0x08	; 8
 24e:	68 f5       	brcc	.+90     	; 0x2aa <DIO_SetPinDirection+0x6e>
     	{    if(PinDirection) { Set_bit(DDRA, PinNum); }
 250:	8a 81       	ldd	r24, Y+2	; 0x02
 252:	88 23       	and	r24, r24
 254:	a9 f0       	breq	.+42     	; 0x280 <DIO_SetPinDirection+0x44>
 256:	8a e3       	ldi	r24, 0x3A	; 58
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	2a e3       	ldi	r18, 0x3A	; 58
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	f9 01       	movw	r30, r18
 260:	20 81       	ld	r18, Z
 262:	62 2f       	mov	r22, r18
 264:	29 81       	ldd	r18, Y+1	; 0x01
 266:	42 2f       	mov	r20, r18
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	21 e0       	ldi	r18, 0x01	; 1
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_SetPinDirection+0x38>
 270:	22 0f       	add	r18, r18
 272:	33 1f       	adc	r19, r19
 274:	4a 95       	dec	r20
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_SetPinDirection+0x34>
 278:	26 2b       	or	r18, r22
 27a:	fc 01       	movw	r30, r24
 27c:	20 83       	st	Z, r18
		{      if(PinDirection) { Set_bit(DDRD, (PinNum-PIN24)); }
            else { Clear_bit(DDRD ,(PinNum-PIN24)); }
		}
		else { }
	
 }
 27e:	c0 c0       	rjmp	.+384    	; 0x400 <__LOCK_REGION_LENGTH__>

 void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
 {    /* PORTA PIN0~PIN7 */
     	if((PinNum>=PIN0)&&(PinNum<=PIN7))
     	{    if(PinDirection) { Set_bit(DDRA, PinNum); }
     		else { Clear_bit(DDRA ,PinNum); }
 280:	8a e3       	ldi	r24, 0x3A	; 58
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	2a e3       	ldi	r18, 0x3A	; 58
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	f9 01       	movw	r30, r18
 28a:	60 81       	ld	r22, Z
 28c:	29 81       	ldd	r18, Y+1	; 0x01
 28e:	42 2f       	mov	r20, r18
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	21 e0       	ldi	r18, 0x01	; 1
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_SetPinDirection+0x60>
 298:	22 0f       	add	r18, r18
 29a:	33 1f       	adc	r19, r19
 29c:	4a 95       	dec	r20
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_SetPinDirection+0x5c>
 2a0:	20 95       	com	r18
 2a2:	26 23       	and	r18, r22
 2a4:	fc 01       	movw	r30, r24
 2a6:	20 83       	st	Z, r18
		{      if(PinDirection) { Set_bit(DDRD, (PinNum-PIN24)); }
            else { Clear_bit(DDRD ,(PinNum-PIN24)); }
		}
		else { }
	
 }
 2a8:	ab c0       	rjmp	.+342    	; 0x400 <__LOCK_REGION_LENGTH__>
     	{    if(PinDirection) { Set_bit(DDRA, PinNum); }
     		else { Clear_bit(DDRA ,PinNum); }
     	}
     	
     	/* PORTB 8~15 */
     	else if((PinNum>=PIN8)&&(PinNum<=PIN15))
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
 2ac:	88 30       	cpi	r24, 0x08	; 8
 2ae:	b0 f1       	brcs	.+108    	; 0x31c <DIO_SetPinDirection+0xe0>
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	80 31       	cpi	r24, 0x10	; 16
 2b4:	98 f5       	brcc	.+102    	; 0x31c <DIO_SetPinDirection+0xe0>
     	{    if(PinDirection) { Set_bit(DDRB, (PinNum-PIN8)); }
 2b6:	8a 81       	ldd	r24, Y+2	; 0x02
 2b8:	88 23       	and	r24, r24
 2ba:	c1 f0       	breq	.+48     	; 0x2ec <DIO_SetPinDirection+0xb0>
 2bc:	87 e3       	ldi	r24, 0x37	; 55
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	27 e3       	ldi	r18, 0x37	; 55
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	f9 01       	movw	r30, r18
 2c6:	20 81       	ld	r18, Z
 2c8:	62 2f       	mov	r22, r18
 2ca:	29 81       	ldd	r18, Y+1	; 0x01
 2cc:	22 2f       	mov	r18, r18
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	a9 01       	movw	r20, r18
 2d2:	48 50       	subi	r20, 0x08	; 8
 2d4:	51 09       	sbc	r21, r1
 2d6:	21 e0       	ldi	r18, 0x01	; 1
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_SetPinDirection+0xa4>
 2dc:	22 0f       	add	r18, r18
 2de:	33 1f       	adc	r19, r19
 2e0:	4a 95       	dec	r20
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_SetPinDirection+0xa0>
 2e4:	26 2b       	or	r18, r22
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 83       	st	Z, r18
 2ea:	8a c0       	rjmp	.+276    	; 0x400 <__LOCK_REGION_LENGTH__>
     	     else { Clear_bit(DDRB ,(PinNum-PIN8)); }
 2ec:	87 e3       	ldi	r24, 0x37	; 55
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	27 e3       	ldi	r18, 0x37	; 55
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	f9 01       	movw	r30, r18
 2f6:	60 81       	ld	r22, Z
 2f8:	29 81       	ldd	r18, Y+1	; 0x01
 2fa:	22 2f       	mov	r18, r18
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	a9 01       	movw	r20, r18
 300:	48 50       	subi	r20, 0x08	; 8
 302:	51 09       	sbc	r21, r1
 304:	21 e0       	ldi	r18, 0x01	; 1
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_SetPinDirection+0xd2>
 30a:	22 0f       	add	r18, r18
 30c:	33 1f       	adc	r19, r19
 30e:	4a 95       	dec	r20
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_SetPinDirection+0xce>
 312:	20 95       	com	r18
 314:	26 23       	and	r18, r22
 316:	fc 01       	movw	r30, r24
 318:	20 83       	st	Z, r18
     		else { Clear_bit(DDRA ,PinNum); }
     	}
     	
     	/* PORTB 8~15 */
     	else if((PinNum>=PIN8)&&(PinNum<=PIN15))
     	{    if(PinDirection) { Set_bit(DDRB, (PinNum-PIN8)); }
 31a:	72 c0       	rjmp	.+228    	; 0x400 <__LOCK_REGION_LENGTH__>
     	     else { Clear_bit(DDRB ,(PinNum-PIN8)); }
        }
     /* PORTC 16~23 */
		else if((PinNum>=PIN16)&&(PinNum<=PIN23))
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	80 31       	cpi	r24, 0x10	; 16
 320:	b0 f1       	brcs	.+108    	; 0x38e <DIO_SetPinDirection+0x152>
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	88 31       	cpi	r24, 0x18	; 24
 326:	98 f5       	brcc	.+102    	; 0x38e <DIO_SetPinDirection+0x152>
		{    if(PinDirection) { Set_bit(DDRC, (PinNum-PIN16)); }
 328:	8a 81       	ldd	r24, Y+2	; 0x02
 32a:	88 23       	and	r24, r24
 32c:	c1 f0       	breq	.+48     	; 0x35e <DIO_SetPinDirection+0x122>
 32e:	84 e3       	ldi	r24, 0x34	; 52
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	24 e3       	ldi	r18, 0x34	; 52
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	f9 01       	movw	r30, r18
 338:	20 81       	ld	r18, Z
 33a:	62 2f       	mov	r22, r18
 33c:	29 81       	ldd	r18, Y+1	; 0x01
 33e:	22 2f       	mov	r18, r18
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	a9 01       	movw	r20, r18
 344:	40 51       	subi	r20, 0x10	; 16
 346:	51 09       	sbc	r21, r1
 348:	21 e0       	ldi	r18, 0x01	; 1
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_SetPinDirection+0x116>
 34e:	22 0f       	add	r18, r18
 350:	33 1f       	adc	r19, r19
 352:	4a 95       	dec	r20
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_SetPinDirection+0x112>
 356:	26 2b       	or	r18, r22
 358:	fc 01       	movw	r30, r24
 35a:	20 83       	st	Z, r18
 35c:	51 c0       	rjmp	.+162    	; 0x400 <__LOCK_REGION_LENGTH__>
		     else { Clear_bit(DDRC ,(PinNum-PIN16)); }
 35e:	84 e3       	ldi	r24, 0x34	; 52
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	24 e3       	ldi	r18, 0x34	; 52
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	f9 01       	movw	r30, r18
 368:	60 81       	ld	r22, Z
 36a:	29 81       	ldd	r18, Y+1	; 0x01
 36c:	22 2f       	mov	r18, r18
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	a9 01       	movw	r20, r18
 372:	40 51       	subi	r20, 0x10	; 16
 374:	51 09       	sbc	r21, r1
 376:	21 e0       	ldi	r18, 0x01	; 1
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_SetPinDirection+0x144>
 37c:	22 0f       	add	r18, r18
 37e:	33 1f       	adc	r19, r19
 380:	4a 95       	dec	r20
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_SetPinDirection+0x140>
 384:	20 95       	com	r18
 386:	26 23       	and	r18, r22
 388:	fc 01       	movw	r30, r24
 38a:	20 83       	st	Z, r18
     	{    if(PinDirection) { Set_bit(DDRB, (PinNum-PIN8)); }
     	     else { Clear_bit(DDRB ,(PinNum-PIN8)); }
        }
     /* PORTC 16~23 */
		else if((PinNum>=PIN16)&&(PinNum<=PIN23))
		{    if(PinDirection) { Set_bit(DDRC, (PinNum-PIN16)); }
 38c:	39 c0       	rjmp	.+114    	; 0x400 <__LOCK_REGION_LENGTH__>
		     else { Clear_bit(DDRC ,(PinNum-PIN16)); }
		}
      /* PORTD PIN24~31 */
		else if((PinNum>=PIN24)&&(PinNum<=PIN31))
 38e:	89 81       	ldd	r24, Y+1	; 0x01
 390:	88 31       	cpi	r24, 0x18	; 24
 392:	b0 f1       	brcs	.+108    	; 0x400 <__LOCK_REGION_LENGTH__>
 394:	89 81       	ldd	r24, Y+1	; 0x01
 396:	80 32       	cpi	r24, 0x20	; 32
 398:	98 f5       	brcc	.+102    	; 0x400 <__LOCK_REGION_LENGTH__>
		{      if(PinDirection) { Set_bit(DDRD, (PinNum-PIN24)); }
 39a:	8a 81       	ldd	r24, Y+2	; 0x02
 39c:	88 23       	and	r24, r24
 39e:	c1 f0       	breq	.+48     	; 0x3d0 <DIO_SetPinDirection+0x194>
 3a0:	81 e3       	ldi	r24, 0x31	; 49
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	21 e3       	ldi	r18, 0x31	; 49
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	f9 01       	movw	r30, r18
 3aa:	20 81       	ld	r18, Z
 3ac:	62 2f       	mov	r22, r18
 3ae:	29 81       	ldd	r18, Y+1	; 0x01
 3b0:	22 2f       	mov	r18, r18
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	a9 01       	movw	r20, r18
 3b6:	48 51       	subi	r20, 0x18	; 24
 3b8:	51 09       	sbc	r21, r1
 3ba:	21 e0       	ldi	r18, 0x01	; 1
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_SetPinDirection+0x188>
 3c0:	22 0f       	add	r18, r18
 3c2:	33 1f       	adc	r19, r19
 3c4:	4a 95       	dec	r20
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_SetPinDirection+0x184>
 3c8:	26 2b       	or	r18, r22
 3ca:	fc 01       	movw	r30, r24
 3cc:	20 83       	st	Z, r18
            else { Clear_bit(DDRD ,(PinNum-PIN24)); }
		}
		else { }
	
 }
 3ce:	18 c0       	rjmp	.+48     	; 0x400 <__LOCK_REGION_LENGTH__>
		     else { Clear_bit(DDRC ,(PinNum-PIN16)); }
		}
      /* PORTD PIN24~31 */
		else if((PinNum>=PIN24)&&(PinNum<=PIN31))
		{      if(PinDirection) { Set_bit(DDRD, (PinNum-PIN24)); }
            else { Clear_bit(DDRD ,(PinNum-PIN24)); }
 3d0:	81 e3       	ldi	r24, 0x31	; 49
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	21 e3       	ldi	r18, 0x31	; 49
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	f9 01       	movw	r30, r18
 3da:	60 81       	ld	r22, Z
 3dc:	29 81       	ldd	r18, Y+1	; 0x01
 3de:	22 2f       	mov	r18, r18
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	a9 01       	movw	r20, r18
 3e4:	48 51       	subi	r20, 0x18	; 24
 3e6:	51 09       	sbc	r21, r1
 3e8:	21 e0       	ldi	r18, 0x01	; 1
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_SetPinDirection+0x1b6>
 3ee:	22 0f       	add	r18, r18
 3f0:	33 1f       	adc	r19, r19
 3f2:	4a 95       	dec	r20
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_SetPinDirection+0x1b2>
 3f6:	20 95       	com	r18
 3f8:	26 23       	and	r18, r22
 3fa:	fc 01       	movw	r30, r24
 3fc:	20 83       	st	Z, r18
		}
		else { }
	
 }
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
 400:	00 00       	nop
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	08 95       	ret

0000040c <main>:

#include "Timer1.h"


int main(void)
{   
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	1f 92       	push	r1
 412:	cd b7       	in	r28, 0x3d	; 61
 414:	de b7       	in	r29, 0x3e	; 62
	 uint8 i= 0 ;
 416:	19 82       	std	Y+1, r1	; 0x01
	 Timer1_init(); /* initiallizing */
 418:	0e 94 ed 04 	call	0x9da	; 0x9da <Timer1_init>
	  Motor_Direction(ANTI_CLOCKWISE);  /* CLOCKWISE  or ANTI-CLOCKWISE */
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	0e 94 b8 04 	call	0x970	; 0x970 <Motor_Direction>

	 
    
    while (1) 
    {  
		for(i=0;i<100;i+=10)
 422:	19 82       	std	Y+1, r1	; 0x01
 424:	07 c0       	rjmp	.+14     	; 0x434 <main+0x28>
		{ Duty_cycle(i ,FAST_PWM_NON_INVERTING_MODE);  /*Changing speed  of motor */
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	89 81       	ldd	r24, Y+1	; 0x01
 42a:	0e 94 1e 02 	call	0x43c	; 0x43c <Duty_cycle>

	 
    
    while (1) 
    {  
		for(i=0;i<100;i+=10)
 42e:	89 81       	ldd	r24, Y+1	; 0x01
 430:	86 5f       	subi	r24, 0xF6	; 246
 432:	89 83       	std	Y+1, r24	; 0x01
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	84 36       	cpi	r24, 0x64	; 100
 438:	b0 f3       	brcs	.-20     	; 0x426 <main+0x1a>
		{ Duty_cycle(i ,FAST_PWM_NON_INVERTING_MODE);  /*Changing speed  of motor */
		}
    }
 43a:	f3 cf       	rjmp	.-26     	; 0x422 <main+0x16>

0000043c <Duty_cycle>:
 *  Author: AVE-LAP-064
 */ 
#include "Timer1.h"

void Duty_cycle( uint8 DC , uint8 Mode )  /* controlling motor speed */
{
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	00 d0       	rcall	.+0      	; 0x442 <Duty_cycle+0x6>
 442:	cd b7       	in	r28, 0x3d	; 61
 444:	de b7       	in	r29, 0x3e	; 62
 446:	89 83       	std	Y+1, r24	; 0x01
 448:	6a 83       	std	Y+2, r22	; 0x02
	switch(Mode)
 44a:	8a 81       	ldd	r24, Y+2	; 0x02
 44c:	88 2f       	mov	r24, r24
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	81 30       	cpi	r24, 0x01	; 1
 452:	91 05       	cpc	r25, r1
 454:	09 f4       	brne	.+2      	; 0x458 <Duty_cycle+0x1c>
 456:	bd c0       	rjmp	.+378    	; 0x5d2 <Duty_cycle+0x196>
 458:	82 30       	cpi	r24, 0x02	; 2
 45a:	91 05       	cpc	r25, r1
 45c:	1c f4       	brge	.+6      	; 0x464 <Duty_cycle+0x28>
 45e:	89 2b       	or	r24, r25
 460:	49 f0       	breq	.+18     	; 0x474 <Duty_cycle+0x38>
		Set_bit(TCCR1A,COM1B1);
		Set_bit(TCCR1B,CS11);
		Set_bit(TCCR1B,WGM13);
		break;
	}
}
 462:	80 c2       	rjmp	.+1280   	; 0x964 <__stack+0x105>
 */ 
#include "Timer1.h"

void Duty_cycle( uint8 DC , uint8 Mode )  /* controlling motor speed */
{
	switch(Mode)
 464:	82 30       	cpi	r24, 0x02	; 2
 466:	91 05       	cpc	r25, r1
 468:	09 f4       	brne	.+2      	; 0x46c <Duty_cycle+0x30>
 46a:	5e c1       	rjmp	.+700    	; 0x728 <Duty_cycle+0x2ec>
 46c:	03 97       	sbiw	r24, 0x03	; 3
 46e:	09 f4       	brne	.+2      	; 0x472 <Duty_cycle+0x36>
 470:	01 c2       	rjmp	.+1026   	; 0x874 <__stack+0x15>
		Set_bit(TCCR1A,COM1B1);
		Set_bit(TCCR1B,CS11);
		Set_bit(TCCR1B,WGM13);
		break;
	}
}
 472:	78 c2       	rjmp	.+1264   	; 0x964 <__stack+0x105>
void Duty_cycle( uint8 DC , uint8 Mode )  /* controlling motor speed */
{
	switch(Mode)
	{
		case 0 :  /* Fast PWM    Non-inverting mode  , prescale 8 */
		OCR1AH = ((TOP_VAL - (DC * (TOP_VAL+1)))/100) >> 8;  /* activating PWM on OC1A pin */
 474:	2b e4       	ldi	r18, 0x4B	; 75
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	68 2f       	mov	r22, r24
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	47 e7       	ldi	r20, 0x77	; 119
 480:	5c ee       	ldi	r21, 0xEC	; 236
 482:	64 9f       	mul	r22, r20
 484:	c0 01       	movw	r24, r0
 486:	65 9f       	mul	r22, r21
 488:	90 0d       	add	r25, r0
 48a:	74 9f       	mul	r23, r20
 48c:	90 0d       	add	r25, r0
 48e:	11 24       	eor	r1, r1
 490:	88 57       	subi	r24, 0x78	; 120
 492:	9c 4e       	sbci	r25, 0xEC	; 236
 494:	44 e6       	ldi	r20, 0x64	; 100
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	ba 01       	movw	r22, r20
 49a:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__divmodhi4>
 49e:	cb 01       	movw	r24, r22
 4a0:	89 2f       	mov	r24, r25
 4a2:	99 0f       	add	r25, r25
 4a4:	99 0b       	sbc	r25, r25
 4a6:	f9 01       	movw	r30, r18
 4a8:	80 83       	st	Z, r24
		OCR1AL = (TOP_VAL - (DC * (TOP_VAL+1)))/100;
 4aa:	2a e4       	ldi	r18, 0x4A	; 74
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	89 81       	ldd	r24, Y+1	; 0x01
 4b0:	68 2f       	mov	r22, r24
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	47 e7       	ldi	r20, 0x77	; 119
 4b6:	5c ee       	ldi	r21, 0xEC	; 236
 4b8:	64 9f       	mul	r22, r20
 4ba:	c0 01       	movw	r24, r0
 4bc:	65 9f       	mul	r22, r21
 4be:	90 0d       	add	r25, r0
 4c0:	74 9f       	mul	r23, r20
 4c2:	90 0d       	add	r25, r0
 4c4:	11 24       	eor	r1, r1
 4c6:	88 57       	subi	r24, 0x78	; 120
 4c8:	9c 4e       	sbci	r25, 0xEC	; 236
 4ca:	44 e6       	ldi	r20, 0x64	; 100
 4cc:	50 e0       	ldi	r21, 0x00	; 0
 4ce:	ba 01       	movw	r22, r20
 4d0:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__divmodhi4>
 4d4:	cb 01       	movw	r24, r22
 4d6:	f9 01       	movw	r30, r18
 4d8:	80 83       	st	Z, r24
		OCR1BH = ((TOP_VAL - (DC * (TOP_VAL+1)))/100) >> 8;  /* activating PWM on OC1B pin */
 4da:	29 e4       	ldi	r18, 0x49	; 73
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	89 81       	ldd	r24, Y+1	; 0x01
 4e0:	68 2f       	mov	r22, r24
 4e2:	70 e0       	ldi	r23, 0x00	; 0
 4e4:	47 e7       	ldi	r20, 0x77	; 119
 4e6:	5c ee       	ldi	r21, 0xEC	; 236
 4e8:	64 9f       	mul	r22, r20
 4ea:	c0 01       	movw	r24, r0
 4ec:	65 9f       	mul	r22, r21
 4ee:	90 0d       	add	r25, r0
 4f0:	74 9f       	mul	r23, r20
 4f2:	90 0d       	add	r25, r0
 4f4:	11 24       	eor	r1, r1
 4f6:	88 57       	subi	r24, 0x78	; 120
 4f8:	9c 4e       	sbci	r25, 0xEC	; 236
 4fa:	44 e6       	ldi	r20, 0x64	; 100
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	ba 01       	movw	r22, r20
 500:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__divmodhi4>
 504:	cb 01       	movw	r24, r22
 506:	89 2f       	mov	r24, r25
 508:	99 0f       	add	r25, r25
 50a:	99 0b       	sbc	r25, r25
 50c:	f9 01       	movw	r30, r18
 50e:	80 83       	st	Z, r24
		OCR1BL = (TOP_VAL - (DC * (TOP_VAL+1)))/100;
 510:	28 e4       	ldi	r18, 0x48	; 72
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	89 81       	ldd	r24, Y+1	; 0x01
 516:	68 2f       	mov	r22, r24
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	47 e7       	ldi	r20, 0x77	; 119
 51c:	5c ee       	ldi	r21, 0xEC	; 236
 51e:	64 9f       	mul	r22, r20
 520:	c0 01       	movw	r24, r0
 522:	65 9f       	mul	r22, r21
 524:	90 0d       	add	r25, r0
 526:	74 9f       	mul	r23, r20
 528:	90 0d       	add	r25, r0
 52a:	11 24       	eor	r1, r1
 52c:	88 57       	subi	r24, 0x78	; 120
 52e:	9c 4e       	sbci	r25, 0xEC	; 236
 530:	44 e6       	ldi	r20, 0x64	; 100
 532:	50 e0       	ldi	r21, 0x00	; 0
 534:	ba 01       	movw	r22, r20
 536:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__divmodhi4>
 53a:	cb 01       	movw	r24, r22
 53c:	f9 01       	movw	r30, r18
 53e:	80 83       	st	Z, r24
		Set_bit(TCCR1A,WGM11);
 540:	8f e4       	ldi	r24, 0x4F	; 79
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	2f e4       	ldi	r18, 0x4F	; 79
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	f9 01       	movw	r30, r18
 54a:	20 81       	ld	r18, Z
 54c:	22 60       	ori	r18, 0x02	; 2
 54e:	fc 01       	movw	r30, r24
 550:	20 83       	st	Z, r18
		Set_bit(TCCR1A,COM1A0);
 552:	8f e4       	ldi	r24, 0x4F	; 79
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	2f e4       	ldi	r18, 0x4F	; 79
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	f9 01       	movw	r30, r18
 55c:	20 81       	ld	r18, Z
 55e:	20 64       	ori	r18, 0x40	; 64
 560:	fc 01       	movw	r30, r24
 562:	20 83       	st	Z, r18
		Set_bit(TCCR1A,COM1A1);
 564:	8f e4       	ldi	r24, 0x4F	; 79
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	2f e4       	ldi	r18, 0x4F	; 79
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	f9 01       	movw	r30, r18
 56e:	20 81       	ld	r18, Z
 570:	20 68       	ori	r18, 0x80	; 128
 572:	fc 01       	movw	r30, r24
 574:	20 83       	st	Z, r18
		Set_bit(TCCR1A,COM1B0);
 576:	8f e4       	ldi	r24, 0x4F	; 79
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	2f e4       	ldi	r18, 0x4F	; 79
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	f9 01       	movw	r30, r18
 580:	20 81       	ld	r18, Z
 582:	20 61       	ori	r18, 0x10	; 16
 584:	fc 01       	movw	r30, r24
 586:	20 83       	st	Z, r18
		Set_bit(TCCR1A,COM1B1);
 588:	8f e4       	ldi	r24, 0x4F	; 79
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	2f e4       	ldi	r18, 0x4F	; 79
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	f9 01       	movw	r30, r18
 592:	20 81       	ld	r18, Z
 594:	20 62       	ori	r18, 0x20	; 32
 596:	fc 01       	movw	r30, r24
 598:	20 83       	st	Z, r18
		Set_bit(TCCR1B,CS11);
 59a:	8e e4       	ldi	r24, 0x4E	; 78
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	2e e4       	ldi	r18, 0x4E	; 78
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	f9 01       	movw	r30, r18
 5a4:	20 81       	ld	r18, Z
 5a6:	22 60       	ori	r18, 0x02	; 2
 5a8:	fc 01       	movw	r30, r24
 5aa:	20 83       	st	Z, r18
		Set_bit(TCCR1B,WGM12);
 5ac:	8e e4       	ldi	r24, 0x4E	; 78
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	2e e4       	ldi	r18, 0x4E	; 78
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	f9 01       	movw	r30, r18
 5b6:	20 81       	ld	r18, Z
 5b8:	28 60       	ori	r18, 0x08	; 8
 5ba:	fc 01       	movw	r30, r24
 5bc:	20 83       	st	Z, r18
		Set_bit(TCCR1B,WGM13);
 5be:	8e e4       	ldi	r24, 0x4E	; 78
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	2e e4       	ldi	r18, 0x4E	; 78
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	f9 01       	movw	r30, r18
 5c8:	20 81       	ld	r18, Z
 5ca:	20 61       	ori	r18, 0x10	; 16
 5cc:	fc 01       	movw	r30, r24
 5ce:	20 83       	st	Z, r18
		break;
 5d0:	c9 c1       	rjmp	.+914    	; 0x964 <__stack+0x105>
		
		case 1 : /* Fast PWM    inverting mode */
		OCR1AH = (( DC * (TOP_VAL+1))/100)>>8;     /* activating PWM on OC1A pin */
 5d2:	2b e4       	ldi	r18, 0x4B	; 75
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	89 81       	ldd	r24, Y+1	; 0x01
 5d8:	48 2f       	mov	r20, r24
 5da:	50 e0       	ldi	r21, 0x00	; 0
 5dc:	89 e8       	ldi	r24, 0x89	; 137
 5de:	93 e1       	ldi	r25, 0x13	; 19
 5e0:	48 9f       	mul	r20, r24
 5e2:	b0 01       	movw	r22, r0
 5e4:	49 9f       	mul	r20, r25
 5e6:	70 0d       	add	r23, r0
 5e8:	58 9f       	mul	r21, r24
 5ea:	70 0d       	add	r23, r0
 5ec:	11 24       	eor	r1, r1
 5ee:	44 e6       	ldi	r20, 0x64	; 100
 5f0:	50 e0       	ldi	r21, 0x00	; 0
 5f2:	cb 01       	movw	r24, r22
 5f4:	ba 01       	movw	r22, r20
 5f6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__divmodhi4>
 5fa:	cb 01       	movw	r24, r22
 5fc:	89 2f       	mov	r24, r25
 5fe:	99 0f       	add	r25, r25
 600:	99 0b       	sbc	r25, r25
 602:	f9 01       	movw	r30, r18
 604:	80 83       	st	Z, r24
		OCR1AL = ( DC * (TOP_VAL+1))/100;
 606:	2a e4       	ldi	r18, 0x4A	; 74
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	89 81       	ldd	r24, Y+1	; 0x01
 60c:	48 2f       	mov	r20, r24
 60e:	50 e0       	ldi	r21, 0x00	; 0
 610:	89 e8       	ldi	r24, 0x89	; 137
 612:	93 e1       	ldi	r25, 0x13	; 19
 614:	48 9f       	mul	r20, r24
 616:	b0 01       	movw	r22, r0
 618:	49 9f       	mul	r20, r25
 61a:	70 0d       	add	r23, r0
 61c:	58 9f       	mul	r21, r24
 61e:	70 0d       	add	r23, r0
 620:	11 24       	eor	r1, r1
 622:	44 e6       	ldi	r20, 0x64	; 100
 624:	50 e0       	ldi	r21, 0x00	; 0
 626:	cb 01       	movw	r24, r22
 628:	ba 01       	movw	r22, r20
 62a:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__divmodhi4>
 62e:	cb 01       	movw	r24, r22
 630:	f9 01       	movw	r30, r18
 632:	80 83       	st	Z, r24
		OCR1BH = (( DC * (TOP_VAL+1))/100)>>8;     /* activating PWM on OC1B pin */
 634:	29 e4       	ldi	r18, 0x49	; 73
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	89 81       	ldd	r24, Y+1	; 0x01
 63a:	48 2f       	mov	r20, r24
 63c:	50 e0       	ldi	r21, 0x00	; 0
 63e:	89 e8       	ldi	r24, 0x89	; 137
 640:	93 e1       	ldi	r25, 0x13	; 19
 642:	48 9f       	mul	r20, r24
 644:	b0 01       	movw	r22, r0
 646:	49 9f       	mul	r20, r25
 648:	70 0d       	add	r23, r0
 64a:	58 9f       	mul	r21, r24
 64c:	70 0d       	add	r23, r0
 64e:	11 24       	eor	r1, r1
 650:	44 e6       	ldi	r20, 0x64	; 100
 652:	50 e0       	ldi	r21, 0x00	; 0
 654:	cb 01       	movw	r24, r22
 656:	ba 01       	movw	r22, r20
 658:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__divmodhi4>
 65c:	cb 01       	movw	r24, r22
 65e:	89 2f       	mov	r24, r25
 660:	99 0f       	add	r25, r25
 662:	99 0b       	sbc	r25, r25
 664:	f9 01       	movw	r30, r18
 666:	80 83       	st	Z, r24
		OCR1BL = ( DC * (TOP_VAL+1))/100;
 668:	28 e4       	ldi	r18, 0x48	; 72
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	89 81       	ldd	r24, Y+1	; 0x01
 66e:	48 2f       	mov	r20, r24
 670:	50 e0       	ldi	r21, 0x00	; 0
 672:	89 e8       	ldi	r24, 0x89	; 137
 674:	93 e1       	ldi	r25, 0x13	; 19
 676:	48 9f       	mul	r20, r24
 678:	b0 01       	movw	r22, r0
 67a:	49 9f       	mul	r20, r25
 67c:	70 0d       	add	r23, r0
 67e:	58 9f       	mul	r21, r24
 680:	70 0d       	add	r23, r0
 682:	11 24       	eor	r1, r1
 684:	44 e6       	ldi	r20, 0x64	; 100
 686:	50 e0       	ldi	r21, 0x00	; 0
 688:	cb 01       	movw	r24, r22
 68a:	ba 01       	movw	r22, r20
 68c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__divmodhi4>
 690:	cb 01       	movw	r24, r22
 692:	f9 01       	movw	r30, r18
 694:	80 83       	st	Z, r24
		Set_bit(TCCR1A,WGM11);
 696:	8f e4       	ldi	r24, 0x4F	; 79
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	2f e4       	ldi	r18, 0x4F	; 79
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	f9 01       	movw	r30, r18
 6a0:	20 81       	ld	r18, Z
 6a2:	22 60       	ori	r18, 0x02	; 2
 6a4:	fc 01       	movw	r30, r24
 6a6:	20 83       	st	Z, r18
		Clear_bit(TCCR1A,COM1A0);
 6a8:	8f e4       	ldi	r24, 0x4F	; 79
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	2f e4       	ldi	r18, 0x4F	; 79
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	f9 01       	movw	r30, r18
 6b2:	20 81       	ld	r18, Z
 6b4:	2f 7b       	andi	r18, 0xBF	; 191
 6b6:	fc 01       	movw	r30, r24
 6b8:	20 83       	st	Z, r18
		Set_bit(TCCR1A,COM1A1);
 6ba:	8f e4       	ldi	r24, 0x4F	; 79
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	2f e4       	ldi	r18, 0x4F	; 79
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	f9 01       	movw	r30, r18
 6c4:	20 81       	ld	r18, Z
 6c6:	20 68       	ori	r18, 0x80	; 128
 6c8:	fc 01       	movw	r30, r24
 6ca:	20 83       	st	Z, r18
		Clear_bit(TCCR1A,COM1B0);
 6cc:	8f e4       	ldi	r24, 0x4F	; 79
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	2f e4       	ldi	r18, 0x4F	; 79
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	f9 01       	movw	r30, r18
 6d6:	20 81       	ld	r18, Z
 6d8:	2f 7e       	andi	r18, 0xEF	; 239
 6da:	fc 01       	movw	r30, r24
 6dc:	20 83       	st	Z, r18
		Set_bit(TCCR1A,COM1B1);
 6de:	8f e4       	ldi	r24, 0x4F	; 79
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	2f e4       	ldi	r18, 0x4F	; 79
 6e4:	30 e0       	ldi	r19, 0x00	; 0
 6e6:	f9 01       	movw	r30, r18
 6e8:	20 81       	ld	r18, Z
 6ea:	20 62       	ori	r18, 0x20	; 32
 6ec:	fc 01       	movw	r30, r24
 6ee:	20 83       	st	Z, r18
		Set_bit(TCCR1B,CS11);
 6f0:	8e e4       	ldi	r24, 0x4E	; 78
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	2e e4       	ldi	r18, 0x4E	; 78
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	f9 01       	movw	r30, r18
 6fa:	20 81       	ld	r18, Z
 6fc:	22 60       	ori	r18, 0x02	; 2
 6fe:	fc 01       	movw	r30, r24
 700:	20 83       	st	Z, r18
		Set_bit(TCCR1B,WGM12);
 702:	8e e4       	ldi	r24, 0x4E	; 78
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	2e e4       	ldi	r18, 0x4E	; 78
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	f9 01       	movw	r30, r18
 70c:	20 81       	ld	r18, Z
 70e:	28 60       	ori	r18, 0x08	; 8
 710:	fc 01       	movw	r30, r24
 712:	20 83       	st	Z, r18
		Set_bit(TCCR1B,WGM13);
 714:	8e e4       	ldi	r24, 0x4E	; 78
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	2e e4       	ldi	r18, 0x4E	; 78
 71a:	30 e0       	ldi	r19, 0x00	; 0
 71c:	f9 01       	movw	r30, r18
 71e:	20 81       	ld	r18, Z
 720:	20 61       	ori	r18, 0x10	; 16
 722:	fc 01       	movw	r30, r24
 724:	20 83       	st	Z, r18
		break;
 726:	1e c1       	rjmp	.+572    	; 0x964 <__stack+0x105>
		
		case 2 : /* Phase correct PWM    Non-inverting mode */
		OCR1AH = ((TOP_VAL - (DC * (TOP_VAL+1)))/100) >> 8;  /* activating PWM on OC1A pin */
 728:	2b e4       	ldi	r18, 0x4B	; 75
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	89 81       	ldd	r24, Y+1	; 0x01
 72e:	68 2f       	mov	r22, r24
 730:	70 e0       	ldi	r23, 0x00	; 0
 732:	47 e7       	ldi	r20, 0x77	; 119
 734:	5c ee       	ldi	r21, 0xEC	; 236
 736:	64 9f       	mul	r22, r20
 738:	c0 01       	movw	r24, r0
 73a:	65 9f       	mul	r22, r21
 73c:	90 0d       	add	r25, r0
 73e:	74 9f       	mul	r23, r20
 740:	90 0d       	add	r25, r0
 742:	11 24       	eor	r1, r1
 744:	88 57       	subi	r24, 0x78	; 120
 746:	9c 4e       	sbci	r25, 0xEC	; 236
 748:	44 e6       	ldi	r20, 0x64	; 100
 74a:	50 e0       	ldi	r21, 0x00	; 0
 74c:	ba 01       	movw	r22, r20
 74e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__divmodhi4>
 752:	cb 01       	movw	r24, r22
 754:	89 2f       	mov	r24, r25
 756:	99 0f       	add	r25, r25
 758:	99 0b       	sbc	r25, r25
 75a:	f9 01       	movw	r30, r18
 75c:	80 83       	st	Z, r24
		OCR1AL = (TOP_VAL - (DC * (TOP_VAL+1)))/100;
 75e:	2a e4       	ldi	r18, 0x4A	; 74
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	89 81       	ldd	r24, Y+1	; 0x01
 764:	68 2f       	mov	r22, r24
 766:	70 e0       	ldi	r23, 0x00	; 0
 768:	47 e7       	ldi	r20, 0x77	; 119
 76a:	5c ee       	ldi	r21, 0xEC	; 236
 76c:	64 9f       	mul	r22, r20
 76e:	c0 01       	movw	r24, r0
 770:	65 9f       	mul	r22, r21
 772:	90 0d       	add	r25, r0
 774:	74 9f       	mul	r23, r20
 776:	90 0d       	add	r25, r0
 778:	11 24       	eor	r1, r1
 77a:	88 57       	subi	r24, 0x78	; 120
 77c:	9c 4e       	sbci	r25, 0xEC	; 236
 77e:	44 e6       	ldi	r20, 0x64	; 100
 780:	50 e0       	ldi	r21, 0x00	; 0
 782:	ba 01       	movw	r22, r20
 784:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__divmodhi4>
 788:	cb 01       	movw	r24, r22
 78a:	f9 01       	movw	r30, r18
 78c:	80 83       	st	Z, r24
		OCR1BH = ((TOP_VAL - (DC * (TOP_VAL+1)))/100) >> 8;  /* activating PWM on OC1B pin */
 78e:	29 e4       	ldi	r18, 0x49	; 73
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	89 81       	ldd	r24, Y+1	; 0x01
 794:	68 2f       	mov	r22, r24
 796:	70 e0       	ldi	r23, 0x00	; 0
 798:	47 e7       	ldi	r20, 0x77	; 119
 79a:	5c ee       	ldi	r21, 0xEC	; 236
 79c:	64 9f       	mul	r22, r20
 79e:	c0 01       	movw	r24, r0
 7a0:	65 9f       	mul	r22, r21
 7a2:	90 0d       	add	r25, r0
 7a4:	74 9f       	mul	r23, r20
 7a6:	90 0d       	add	r25, r0
 7a8:	11 24       	eor	r1, r1
 7aa:	88 57       	subi	r24, 0x78	; 120
 7ac:	9c 4e       	sbci	r25, 0xEC	; 236
 7ae:	44 e6       	ldi	r20, 0x64	; 100
 7b0:	50 e0       	ldi	r21, 0x00	; 0
 7b2:	ba 01       	movw	r22, r20
 7b4:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__divmodhi4>
 7b8:	cb 01       	movw	r24, r22
 7ba:	89 2f       	mov	r24, r25
 7bc:	99 0f       	add	r25, r25
 7be:	99 0b       	sbc	r25, r25
 7c0:	f9 01       	movw	r30, r18
 7c2:	80 83       	st	Z, r24
		OCR1BL = (TOP_VAL - (DC * (TOP_VAL+1)))/100;
 7c4:	28 e4       	ldi	r18, 0x48	; 72
 7c6:	30 e0       	ldi	r19, 0x00	; 0
 7c8:	89 81       	ldd	r24, Y+1	; 0x01
 7ca:	68 2f       	mov	r22, r24
 7cc:	70 e0       	ldi	r23, 0x00	; 0
 7ce:	47 e7       	ldi	r20, 0x77	; 119
 7d0:	5c ee       	ldi	r21, 0xEC	; 236
 7d2:	64 9f       	mul	r22, r20
 7d4:	c0 01       	movw	r24, r0
 7d6:	65 9f       	mul	r22, r21
 7d8:	90 0d       	add	r25, r0
 7da:	74 9f       	mul	r23, r20
 7dc:	90 0d       	add	r25, r0
 7de:	11 24       	eor	r1, r1
 7e0:	88 57       	subi	r24, 0x78	; 120
 7e2:	9c 4e       	sbci	r25, 0xEC	; 236
 7e4:	44 e6       	ldi	r20, 0x64	; 100
 7e6:	50 e0       	ldi	r21, 0x00	; 0
 7e8:	ba 01       	movw	r22, r20
 7ea:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__divmodhi4>
 7ee:	cb 01       	movw	r24, r22
 7f0:	f9 01       	movw	r30, r18
 7f2:	80 83       	st	Z, r24
		Set_bit(TCCR1A,WGM11);
 7f4:	8f e4       	ldi	r24, 0x4F	; 79
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	2f e4       	ldi	r18, 0x4F	; 79
 7fa:	30 e0       	ldi	r19, 0x00	; 0
 7fc:	f9 01       	movw	r30, r18
 7fe:	20 81       	ld	r18, Z
 800:	22 60       	ori	r18, 0x02	; 2
 802:	fc 01       	movw	r30, r24
 804:	20 83       	st	Z, r18
		Set_bit(TCCR1A,COM1A0);
 806:	8f e4       	ldi	r24, 0x4F	; 79
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	2f e4       	ldi	r18, 0x4F	; 79
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	f9 01       	movw	r30, r18
 810:	20 81       	ld	r18, Z
 812:	20 64       	ori	r18, 0x40	; 64
 814:	fc 01       	movw	r30, r24
 816:	20 83       	st	Z, r18
		Set_bit(TCCR1A,COM1A1);
 818:	8f e4       	ldi	r24, 0x4F	; 79
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	2f e4       	ldi	r18, 0x4F	; 79
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	f9 01       	movw	r30, r18
 822:	20 81       	ld	r18, Z
 824:	20 68       	ori	r18, 0x80	; 128
 826:	fc 01       	movw	r30, r24
 828:	20 83       	st	Z, r18
		Set_bit(TCCR1A,COM1B0);
 82a:	8f e4       	ldi	r24, 0x4F	; 79
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	2f e4       	ldi	r18, 0x4F	; 79
 830:	30 e0       	ldi	r19, 0x00	; 0
 832:	f9 01       	movw	r30, r18
 834:	20 81       	ld	r18, Z
 836:	20 61       	ori	r18, 0x10	; 16
 838:	fc 01       	movw	r30, r24
 83a:	20 83       	st	Z, r18
		Set_bit(TCCR1A,COM1B1);
 83c:	8f e4       	ldi	r24, 0x4F	; 79
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	2f e4       	ldi	r18, 0x4F	; 79
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	f9 01       	movw	r30, r18
 846:	20 81       	ld	r18, Z
 848:	20 62       	ori	r18, 0x20	; 32
 84a:	fc 01       	movw	r30, r24
 84c:	20 83       	st	Z, r18
		Set_bit(TCCR1B,CS11);
 84e:	8e e4       	ldi	r24, 0x4E	; 78
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	2e e4       	ldi	r18, 0x4E	; 78
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	f9 01       	movw	r30, r18
 858:	20 81       	ld	r18, Z
 85a:	22 60       	ori	r18, 0x02	; 2
 85c:	fc 01       	movw	r30, r24
 85e:	20 83       	st	Z, r18
		Set_bit(TCCR1B,WGM13);
 860:	8e e4       	ldi	r24, 0x4E	; 78
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	2e e4       	ldi	r18, 0x4E	; 78
 866:	30 e0       	ldi	r19, 0x00	; 0
 868:	f9 01       	movw	r30, r18
 86a:	20 81       	ld	r18, Z
 86c:	20 61       	ori	r18, 0x10	; 16
 86e:	fc 01       	movw	r30, r24
 870:	20 83       	st	Z, r18
		break;
 872:	78 c0       	rjmp	.+240    	; 0x964 <__stack+0x105>
		
		case 3 : /* Phase correct PWM    Non-inverting mode */
		OCR1AH = (( DC * (TOP_VAL+1)))>>8;    /* activating PWM on OC1A pin */
 874:	8b e4       	ldi	r24, 0x4B	; 75
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	29 81       	ldd	r18, Y+1	; 0x01
 87a:	62 2f       	mov	r22, r18
 87c:	70 e0       	ldi	r23, 0x00	; 0
 87e:	49 e8       	ldi	r20, 0x89	; 137
 880:	53 e1       	ldi	r21, 0x13	; 19
 882:	64 9f       	mul	r22, r20
 884:	90 01       	movw	r18, r0
 886:	65 9f       	mul	r22, r21
 888:	30 0d       	add	r19, r0
 88a:	74 9f       	mul	r23, r20
 88c:	30 0d       	add	r19, r0
 88e:	11 24       	eor	r1, r1
 890:	23 2f       	mov	r18, r19
 892:	33 0f       	add	r19, r19
 894:	33 0b       	sbc	r19, r19
 896:	fc 01       	movw	r30, r24
 898:	20 83       	st	Z, r18
		OCR1AL = ( DC * (TOP_VAL+1));
 89a:	8a e4       	ldi	r24, 0x4A	; 74
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	39 81       	ldd	r19, Y+1	; 0x01
 8a0:	29 e8       	ldi	r18, 0x89	; 137
 8a2:	32 9f       	mul	r19, r18
 8a4:	20 2d       	mov	r18, r0
 8a6:	11 24       	eor	r1, r1
 8a8:	fc 01       	movw	r30, r24
 8aa:	20 83       	st	Z, r18
		OCR1BH = (( DC * (TOP_VAL+1)))>>8;     /* activating PWM on OC1B pin */
 8ac:	89 e4       	ldi	r24, 0x49	; 73
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	29 81       	ldd	r18, Y+1	; 0x01
 8b2:	62 2f       	mov	r22, r18
 8b4:	70 e0       	ldi	r23, 0x00	; 0
 8b6:	49 e8       	ldi	r20, 0x89	; 137
 8b8:	53 e1       	ldi	r21, 0x13	; 19
 8ba:	64 9f       	mul	r22, r20
 8bc:	90 01       	movw	r18, r0
 8be:	65 9f       	mul	r22, r21
 8c0:	30 0d       	add	r19, r0
 8c2:	74 9f       	mul	r23, r20
 8c4:	30 0d       	add	r19, r0
 8c6:	11 24       	eor	r1, r1
 8c8:	23 2f       	mov	r18, r19
 8ca:	33 0f       	add	r19, r19
 8cc:	33 0b       	sbc	r19, r19
 8ce:	fc 01       	movw	r30, r24
 8d0:	20 83       	st	Z, r18
		OCR1BL = ( DC * (TOP_VAL+1));
 8d2:	88 e4       	ldi	r24, 0x48	; 72
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	39 81       	ldd	r19, Y+1	; 0x01
 8d8:	29 e8       	ldi	r18, 0x89	; 137
 8da:	32 9f       	mul	r19, r18
 8dc:	20 2d       	mov	r18, r0
 8de:	11 24       	eor	r1, r1
 8e0:	fc 01       	movw	r30, r24
 8e2:	20 83       	st	Z, r18
		Set_bit(TCCR1A,WGM11);
 8e4:	8f e4       	ldi	r24, 0x4F	; 79
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	2f e4       	ldi	r18, 0x4F	; 79
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	f9 01       	movw	r30, r18
 8ee:	20 81       	ld	r18, Z
 8f0:	22 60       	ori	r18, 0x02	; 2
 8f2:	fc 01       	movw	r30, r24
 8f4:	20 83       	st	Z, r18
		Clear_bit(TCCR1A,COM1A0);
 8f6:	8f e4       	ldi	r24, 0x4F	; 79
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	2f e4       	ldi	r18, 0x4F	; 79
 8fc:	30 e0       	ldi	r19, 0x00	; 0
 8fe:	f9 01       	movw	r30, r18
 900:	20 81       	ld	r18, Z
 902:	2f 7b       	andi	r18, 0xBF	; 191
 904:	fc 01       	movw	r30, r24
 906:	20 83       	st	Z, r18
		Set_bit(TCCR1A,COM1A1);
 908:	8f e4       	ldi	r24, 0x4F	; 79
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	2f e4       	ldi	r18, 0x4F	; 79
 90e:	30 e0       	ldi	r19, 0x00	; 0
 910:	f9 01       	movw	r30, r18
 912:	20 81       	ld	r18, Z
 914:	20 68       	ori	r18, 0x80	; 128
 916:	fc 01       	movw	r30, r24
 918:	20 83       	st	Z, r18
		Clear_bit(TCCR1A,COM1B0);
 91a:	8f e4       	ldi	r24, 0x4F	; 79
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	2f e4       	ldi	r18, 0x4F	; 79
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	f9 01       	movw	r30, r18
 924:	20 81       	ld	r18, Z
 926:	2f 7e       	andi	r18, 0xEF	; 239
 928:	fc 01       	movw	r30, r24
 92a:	20 83       	st	Z, r18
		Set_bit(TCCR1A,COM1B1);
 92c:	8f e4       	ldi	r24, 0x4F	; 79
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	2f e4       	ldi	r18, 0x4F	; 79
 932:	30 e0       	ldi	r19, 0x00	; 0
 934:	f9 01       	movw	r30, r18
 936:	20 81       	ld	r18, Z
 938:	20 62       	ori	r18, 0x20	; 32
 93a:	fc 01       	movw	r30, r24
 93c:	20 83       	st	Z, r18
		Set_bit(TCCR1B,CS11);
 93e:	8e e4       	ldi	r24, 0x4E	; 78
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	2e e4       	ldi	r18, 0x4E	; 78
 944:	30 e0       	ldi	r19, 0x00	; 0
 946:	f9 01       	movw	r30, r18
 948:	20 81       	ld	r18, Z
 94a:	22 60       	ori	r18, 0x02	; 2
 94c:	fc 01       	movw	r30, r24
 94e:	20 83       	st	Z, r18
		Set_bit(TCCR1B,WGM13);
 950:	8e e4       	ldi	r24, 0x4E	; 78
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	2e e4       	ldi	r18, 0x4E	; 78
 956:	30 e0       	ldi	r19, 0x00	; 0
 958:	f9 01       	movw	r30, r18
 95a:	20 81       	ld	r18, Z
 95c:	20 61       	ori	r18, 0x10	; 16
 95e:	fc 01       	movw	r30, r24
 960:	20 83       	st	Z, r18
		break;
 962:	00 00       	nop
	}
}
 964:	00 00       	nop
 966:	0f 90       	pop	r0
 968:	0f 90       	pop	r0
 96a:	df 91       	pop	r29
 96c:	cf 91       	pop	r28
 96e:	08 95       	ret

00000970 <Motor_Direction>:

void Motor_Direction(uint8 clockwise)
{   switch(clockwise)
 970:	cf 93       	push	r28
 972:	df 93       	push	r29
 974:	1f 92       	push	r1
 976:	cd b7       	in	r28, 0x3d	; 61
 978:	de b7       	in	r29, 0x3e	; 62
 97a:	89 83       	std	Y+1, r24	; 0x01
 97c:	89 81       	ldd	r24, Y+1	; 0x01
 97e:	88 2f       	mov	r24, r24
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	00 97       	sbiw	r24, 0x00	; 0
 984:	19 f0       	breq	.+6      	; 0x98c <Motor_Direction+0x1c>
 986:	01 97       	sbiw	r24, 0x01	; 1
 988:	91 f0       	breq	.+36     	; 0x9ae <Motor_Direction+0x3e>
			 DIO_WritePin(PIN30,LOW);
			 DIO_WritePin(PIN31,HIGH);
			 break;
			
	}
 98a:	22 c0       	rjmp	.+68     	; 0x9d0 <Motor_Direction+0x60>
void Motor_Direction(uint8 clockwise)
{   switch(clockwise)
	{
	 /* clockwise direction */
	 case 0:
			DIO_WritePin(PIN26,HIGH);
 98c:	61 e0       	ldi	r22, 0x01	; 1
 98e:	8a e1       	ldi	r24, 0x1A	; 26
 990:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
			DIO_WritePin(PIN27,LOW);
 994:	60 e0       	ldi	r22, 0x00	; 0
 996:	8b e1       	ldi	r24, 0x1B	; 27
 998:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
			DIO_WritePin(PIN30,HIGH);
 99c:	61 e0       	ldi	r22, 0x01	; 1
 99e:	8e e1       	ldi	r24, 0x1E	; 30
 9a0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
			DIO_WritePin(PIN31,LOW);
 9a4:	60 e0       	ldi	r22, 0x00	; 0
 9a6:	8f e1       	ldi	r24, 0x1F	; 31
 9a8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
			break;
 9ac:	11 c0       	rjmp	.+34     	; 0x9d0 <Motor_Direction+0x60>
	case 1: /* anti clock_wise direction */
			 DIO_WritePin(PIN26,LOW);
 9ae:	60 e0       	ldi	r22, 0x00	; 0
 9b0:	8a e1       	ldi	r24, 0x1A	; 26
 9b2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
			 DIO_WritePin(PIN27,HIGH);
 9b6:	61 e0       	ldi	r22, 0x01	; 1
 9b8:	8b e1       	ldi	r24, 0x1B	; 27
 9ba:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
			 DIO_WritePin(PIN30,LOW);
 9be:	60 e0       	ldi	r22, 0x00	; 0
 9c0:	8e e1       	ldi	r24, 0x1E	; 30
 9c2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
			 DIO_WritePin(PIN31,HIGH);
 9c6:	61 e0       	ldi	r22, 0x01	; 1
 9c8:	8f e1       	ldi	r24, 0x1F	; 31
 9ca:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
			 break;
 9ce:	00 00       	nop
			
	}
 9d0:	00 00       	nop
 9d2:	0f 90       	pop	r0
 9d4:	df 91       	pop	r29
 9d6:	cf 91       	pop	r28
 9d8:	08 95       	ret

000009da <Timer1_init>:



#include "Timer1.h"
void Timer1_init (void)
{  /* clear TCNT1 */
 9da:	cf 93       	push	r28
 9dc:	df 93       	push	r29
 9de:	cd b7       	in	r28, 0x3d	; 61
 9e0:	de b7       	in	r29, 0x3e	; 62
    TCNT1H = LOW;
 9e2:	8d e4       	ldi	r24, 0x4D	; 77
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	fc 01       	movw	r30, r24
 9e8:	10 82       	st	Z, r1
	TCNT1L = LOW;
 9ea:	8c e4       	ldi	r24, 0x4C	; 76
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	fc 01       	movw	r30, r24
 9f0:	10 82       	st	Z, r1
	/* setting motor pins to outputs*/
	DIO_SetPinDirection(OC1B,HIGH);
 9f2:	61 e0       	ldi	r22, 0x01	; 1
 9f4:	8c e1       	ldi	r24, 0x1C	; 28
 9f6:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_SetPinDirection>
	DIO_SetPinDirection(OC1A,HIGH);
 9fa:	61 e0       	ldi	r22, 0x01	; 1
 9fc:	8d e1       	ldi	r24, 0x1D	; 29
 9fe:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN26,HIGH);
 a02:	61 e0       	ldi	r22, 0x01	; 1
 a04:	8a e1       	ldi	r24, 0x1A	; 26
 a06:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN27,HIGH);
 a0a:	61 e0       	ldi	r22, 0x01	; 1
 a0c:	8b e1       	ldi	r24, 0x1B	; 27
 a0e:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN30,HIGH);
 a12:	61 e0       	ldi	r22, 0x01	; 1
 a14:	8e e1       	ldi	r24, 0x1E	; 30
 a16:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN31,HIGH);
 a1a:	61 e0       	ldi	r22, 0x01	; 1
 a1c:	8f e1       	ldi	r24, 0x1F	; 31
 a1e:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_SetPinDirection>

	
   /*Set ICR1 with top value */
	ICR1H  = (TOP_VAL >> 8);
 a22:	87 e4       	ldi	r24, 0x47	; 71
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	23 e1       	ldi	r18, 0x13	; 19
 a28:	fc 01       	movw	r30, r24
 a2a:	20 83       	st	Z, r18
	ICR1L  = TOP_VAL ;
 a2c:	86 e4       	ldi	r24, 0x46	; 70
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	28 e8       	ldi	r18, 0x88	; 136
 a32:	fc 01       	movw	r30, r24
 a34:	20 83       	st	Z, r18

}
 a36:	00 00       	nop
 a38:	df 91       	pop	r29
 a3a:	cf 91       	pop	r28
 a3c:	08 95       	ret

00000a3e <__divmodhi4>:
 a3e:	97 fb       	bst	r25, 7
 a40:	07 2e       	mov	r0, r23
 a42:	16 f4       	brtc	.+4      	; 0xa48 <__divmodhi4+0xa>
 a44:	00 94       	com	r0
 a46:	07 d0       	rcall	.+14     	; 0xa56 <__divmodhi4_neg1>
 a48:	77 fd       	sbrc	r23, 7
 a4a:	09 d0       	rcall	.+18     	; 0xa5e <__divmodhi4_neg2>
 a4c:	0e 94 33 05 	call	0xa66	; 0xa66 <__udivmodhi4>
 a50:	07 fc       	sbrc	r0, 7
 a52:	05 d0       	rcall	.+10     	; 0xa5e <__divmodhi4_neg2>
 a54:	3e f4       	brtc	.+14     	; 0xa64 <__divmodhi4_exit>

00000a56 <__divmodhi4_neg1>:
 a56:	90 95       	com	r25
 a58:	81 95       	neg	r24
 a5a:	9f 4f       	sbci	r25, 0xFF	; 255
 a5c:	08 95       	ret

00000a5e <__divmodhi4_neg2>:
 a5e:	70 95       	com	r23
 a60:	61 95       	neg	r22
 a62:	7f 4f       	sbci	r23, 0xFF	; 255

00000a64 <__divmodhi4_exit>:
 a64:	08 95       	ret

00000a66 <__udivmodhi4>:
 a66:	aa 1b       	sub	r26, r26
 a68:	bb 1b       	sub	r27, r27
 a6a:	51 e1       	ldi	r21, 0x11	; 17
 a6c:	07 c0       	rjmp	.+14     	; 0xa7c <__udivmodhi4_ep>

00000a6e <__udivmodhi4_loop>:
 a6e:	aa 1f       	adc	r26, r26
 a70:	bb 1f       	adc	r27, r27
 a72:	a6 17       	cp	r26, r22
 a74:	b7 07       	cpc	r27, r23
 a76:	10 f0       	brcs	.+4      	; 0xa7c <__udivmodhi4_ep>
 a78:	a6 1b       	sub	r26, r22
 a7a:	b7 0b       	sbc	r27, r23

00000a7c <__udivmodhi4_ep>:
 a7c:	88 1f       	adc	r24, r24
 a7e:	99 1f       	adc	r25, r25
 a80:	5a 95       	dec	r21
 a82:	a9 f7       	brne	.-22     	; 0xa6e <__udivmodhi4_loop>
 a84:	80 95       	com	r24
 a86:	90 95       	com	r25
 a88:	bc 01       	movw	r22, r24
 a8a:	cd 01       	movw	r24, r26
 a8c:	08 95       	ret

00000a8e <_exit>:
 a8e:	f8 94       	cli

00000a90 <__stop_program>:
 a90:	ff cf       	rjmp	.-2      	; 0xa90 <__stop_program>
